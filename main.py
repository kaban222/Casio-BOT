import asyncio
import requests

from aiogram import *
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import json
import random
import time
import datetime
from datetime import timedelta
from datetime import datetime
import threading
from threading import Thread
import math
from operator import itemgetter
from Chat_all import get_chat_members

import projectSettings

if projectSettings.host:
    PROXY_URL = "http://proxy.server:3128"
    bot = Bot(projectSettings.tok, parse_mode="HTML", disable_web_page_preview=True, proxy=PROXY_URL)
    dp = Dispatcher(bot)
else:
    bot = Bot(projectSettings.tok, parse_mode="HTML", disable_web_page_preview=True)
    dp = Dispatcher(bot)

#///////////////////         GAME STTIC
GLAVA = projectSettings.id_vladelec
group_logs = projectSettings.Logs
kurs = projectSettings.kurs
LIMIT = projectSettings.limit
link = ""

#chat_members = await get_chat_members(message.chat.id)
chanel_id = "-1002031836075"
Chat_id = "-1002042398001"

#///////////////////      BD
BD = {}
PF = {}
CHAT = {}
DONAT = {}
BANK = {}
REF = {}
CHAT_USERS = {}
BAN = {}
WORK = {}

chat_link = "https://t.me/CasioWorldl"
chanel_link = "https://t.me/Trychanel_casino"
partner_chat_link = "https://t.me/+YLp4WG_OAhdmOTAy"


#//    GAME Lists
chat_ruletka = {}
List_Of_Time = {}
ruletka_in = {}
Lot = {}
Drive = {}
BlackJack = {}

def load():
    global BD, PF, CHAT, DONAT, BANK, REF, Lot, CHAT_USERS, BAN, WORK
    try:
        f1 = open("BD/Persons.json", "r")
        BD = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #1 \nBD/Persons.json")

    try:
        f1 = open("BD/Performers.json", "r")
        PF = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #2 \nBD/Performers.json")

    try:
        f1 = open("BD/Chats.json", "r")
        CHAT = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #3\nBD/Chats.json")

    try:
        f1 = open("BD/DONAT.json", "r")
        DONAT = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #4\nBD/DONAT.json")

    try:
        f1 = open("BD/BANK.json", "r")
        BANK = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #5\nBD/BANK.json")

    try:
        f1 = open("BD/REFERAL.json", "r")
        REF = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #6\nBD/REFERAL.json")

    try:
        f1 = open("BD/Lotery.json", "r")
        Lot = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #7\nBD/Lotery.json")

    try:
        f1 = open("BD/users_chat.json", "r")
        CHAT_USERS = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #8\nBD/users_chat.json")

    try:
        f1 = open("BD/BAN.json", "r")
        BAN = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #9\nBD/BAN.json")

    try:
        f1 = open("BD/WORK.json", "r")
        WORK = json.load(f1)
        f1.close()
    except:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ #10\nBD/WORK.json")

def save():
    global BD
    f1 = open("BD/Persons.json", "w")
    json.dump(BD, f1, ensure_ascii=False)
    f1.close()

def save_PF():
    global PF
    f1 = open("BD/Performers.json", "w")
    json.dump(PF, f1, ensure_ascii=False)
    f1.close()

def save_CHAT():
    global CHAT
    f1 = open("BD/Chats.json", "w")
    json.dump(CHAT, f1, ensure_ascii=False)
    f1.close()

def save_DONAT():
    global DONAT
    f1 = open("BD/DONAT.json", "w")
    json.dump(DONAT, f1, ensure_ascii=False)
    f1.close()

def save_BANK():
    global BANK
    f1 = open("BD/BANK.json", "w")
    json.dump(BANK, f1, ensure_ascii=False)
    f1.close()

def save_REF():
    global REF
    f1 = open("BD/REFERAL.json", "w")
    json.dump(REF, f1, ensure_ascii=False)
    f1.close()

def save_LOT():
    global Lot
    f1 = open("BD/Lotery.json", "w")
    json.dump(Lot, f1, ensure_ascii=False)
    f1.close()

def save_chat_users():
    global CHAT_USERS
    f1 = open("BD/users_chat.json", "w")
    json.dump(CHAT_USERS, f1, ensure_ascii=False)
    f1.close()

def save_Ban():
    global BAN
    f1 = open("BD/BAN.json", "w")
    json.dump(BAN, f1, ensure_ascii=False)
    f1.close()

def save_WORK():
    global WORK
    f1 = open("BD/WORK.json", "w")
    json.dump(WORK, f1, ensure_ascii=False)
    f1.close()

async def registration(kkk):
    global BD
    if kkk not in BD.keys():
        BD[kkk] = {
            "balance":10000,
            "lose":0,
            "win":0,
            "limit": {"much":0, "time":0},
            "take":0,
            "give":0,
            "max_win":0,
            "max_stavka":0,
            "name":"–ò–≥—Ä–æ–∫",
            "admin": False,
        }
        save()
        print(f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {datetime.now()} \nid:{kkk}")
        await bot.send_message(group_logs, f"–ù–æ–≤–∞—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è: {datetime.now()} \nid:{kkk}\n\ntg://openmessage?user_id={kkk}")

async def users_in_chat(chat_id, msg):
    global CHAT_USERS
    if chat_id not in CHAT_USERS.keys():
        if msg.chat.type == "private":
            CHAT_USERS[chat_id] = [msg.from_user.id]
            save_chat_users()
        else:
            try:
                chat_members = await get_chat_members(int(chat_id))
                CHAT_USERS[chat_id] = chat_members
                save_chat_users()
            except:
                pass

async def chek_user_in_chat(chat_id, user_id, msg):
    if chat_id not in CHAT_USERS.keys():
        if msg.chat.type == "private":
            CHAT_USERS[chat_id] = [int(user_id)]
        else:
            await users_in_chat(chat_id, msg)
    else:
        if user_id not in CHAT_USERS[chat_id]:
            CHAT_USERS[chat_id].append(int(user_id))

    save_chat_users()

async def chat_registration(chat_id, msg):
    try:
        chat_link = msg.chat.invite_link
    except:
        chat_link = "None"

    if chat_id not in CHAT.keys():
        try:
            chat_link = msg.chat.invite_link
        except:
            chat_link = "None"

        CHAT[chat_id] = {
            "link": chat_link,
            "soo": 0,
            "cmd": 0,
            "max_win": 0,
            'win': 0,
        }
        await bot.send_message(group_logs, f"–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞. ID: {chat_id}")

    if str(CHAT[chat_id]['link']) == "None":
        if str(msg.chat.type) == "private":
            CHAT[chat_id]['link'] = str("tg://openmessage?user_id=" + str(msg.from_user.id))
        else:
            q = await bot.create_chat_invite_link(chat_id=chat_id, name=str(chat_id))
            CHAT[chat_id]['link'] = str(q['invite_link'])

    CHAT[chat_id]['soo'] += 1
    if CHAT[chat_id]['soo'] % 200 == 0:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data="takeBonus"))
        await bot.send_message(msg.chat.id, f"üí∏–ö–∞–∂–¥—ã–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞. \n\nüí™–£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å –ø–æ –Ω–µ–π 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤!\n\nüòé–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: –ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–±—Ä–∞–ª!", reply_markup=kb)

    save_CHAT()

def Life():
    q = requests.get(link)
    tim = random.randint(30, 50)
    try:
        print(f"\n\n************\n–û–∂–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è! \n  1.Next: {tim} —Å–µ–∫.\n  2.Status: {q.status_code}\n************\n")
    except:
        print(f"–û–∂–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è! \n  1.Next: {tim} —Å–µ–∫.")

    threading.Timer(tim, Life).start()

#///////////////////        DONAT

async def DepDonat(msg, kol):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    lst_inf = {"1":"2", "2":"4", "3":"6", "4":"8"}
    lst_buy = {"1":1000, "2":1250, "3": 1500, "4":2000}
    if kol not in lst_inf.keys():
        txt_maga = f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏:\n" \
                   f"\n" \
                   f"*–ò–∑ –¥–æ–Ω–∞—Ç –º–∞–≥–∞–∑–∏–Ω–∞\n" \
                   f"1Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 2% - 1000 spiritüåÄ\n" \
                   f"2Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 4% - 1250 spiritüåÄ\n" \
                   f"3Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 6% - 1500 spiritüåÄ\n" \
                   f"4Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 8% - 2000 spiritüåÄ\n"
        await bot.send_message(msg.chat.id, txt_maga)
    else:
        if BANK[kkk]['procent'] > int(lst_inf[kol]):
            await bot.send_message(msg.chat.id, f"{mention}, –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –∫–æ–ø–∏–ª–∫–µ –≤—ã—à–µ –ø–æ–∫—É–ø–∞–µ–º–æ–≥–æ.")
        elif BANK[kkk]['procent'] == int(lst_inf[kol]):
            await bot.send_message(msg.chat.id, f"{mention}, –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –∫–æ–ø–∏–ª–∫–µ —Ä–∞–≤–µ–Ω –ø–æ–∫—É–ø–∞–µ–º–æ–º—É. –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–π –ø—Ä–æ—Ü–µ–Ω—Ç")
        else:
            if kkk not in DONAT.keys():
                DONAT[kkk]['donat'] = 0

            if DONAT[kkk]['donat'] < lst_buy[kol]:
                await bot.send_message(msg.chat.id, f"{mention}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ spirit CoinüåÄ :(")
            else:
                BANK[kkk]['procent'] = int(lst_inf[kol])
                DONAT[kkk]['donat'] -= lst_buy[kol]
                save_DONAT()
                save_BANK()
                await bot.send_message(msg.chat.id, f"{mention}, —É—Å–ª—É–≥–∞ –æ–∫–∞–∑–∞–Ω–∞‚úÖ \n"
                                                    f"–¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–Ω—Ç –≤ –∫–æ–ø–∏–ª–∫–µ: {lst_inf[kol]}")

async def ObmDonat(msg, kol):
    global kurs
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    kol = money(kol, kkk)
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    else:
        kol = int(kol['txt'])
        if kkk not in DONAT.keys():
            DONAT[kkk]['donat'] = 0

        if DONAT[kkk]['donat'] < kol:
            await bot.send_message(msg.chat.id, f"{mention}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ spirit CoinüåÄ :(")
        else:
            DONAT[kkk]['donat'] -= kol
            BD[kkk]['balance'] += kurs * kol
            await bot.send_message(msg.chat.id, f"{mention}, –í—ã –æ–±–º–µ–Ω—è–ª–∏ {kol} spirit CoinüåÄ. –ü–æ –∫—É—Ä—Å—É: {kurs}\n\nüöÄ–ò—Ç–æ–≥: +{kol * kurs}")
        save_DONAT()
        save()
        await bot.send_message(group_logs, f"–û–±–º–µ–Ω –¥–æ–Ω–∞—Ç–∞: tg://openmessage?user_id={kkk}\n\nKOL: {kol}#donat_obmen")


async def send_donat_list(msg):
    global kurs
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã", callback_data="DONAT_LIST"))
    txt = f"<b><i>{mention},   –î–û–ù–ê–¢–ù–´–ô –ú–ê–ì–ê–ó–ò–ù–ß–ò–ö </i></b>\n" \
          f"\n" \
          f"üí∏ –û–±–º–µ–Ω: 1spiritüåÄ = {kurs} –ú–æ–Ω–µ—Ç–∫–∞–ºü™ô \n" \
          f"ü™ô–û–±–º–µ–Ω Spirit: –û–±–º–µ–Ω—è—Ç—å (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n" \
          f"\n" \
          f"üèÜ<b><i> –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:</i></b>\n" \
          f" 1Ô∏è‚É£ GOLD VIP[100 000]üåÄ\n" \
          f" 2Ô∏è‚É£ DIMOND VIP[300 000]üåÄ\n" \
          f"\n" \
          f"üîù–ü–æ–∫—É–ø–∫–∞: /buyvip\n" \
          f"\n" \
          f"‚ö°<b><i>–ë—É—Å—Ç –ö–æ–ø–∏–ª–∫–∏:</i></b>\n" \
          f"  1Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 2% - 1000 spiritüåÄ\n" \
          f"  2Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 4% - 1250 spiritüåÄ\n" \
          f"  3Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 6% - 1500 spiritüåÄ\n" \
          f"  4Ô∏è‚É£ –î–µ–ø–æ–∑–∏—Ç 8% - 2000 spiritüåÄ\n" \
          f"\n" \
          f"üîùÔ∏è–ü–æ–∫—É–ø–∫–∞: !–î–µ–ø–æ–∑–∏—Ç (–Ω–æ–º–µ—Ä)\n" \
          f"\n" \
          f"üéà<b><i>–ø—Ä–æ–º–æ–∫–æ–¥—ã</i></b>\n" \
          f"  <i>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª</i>\n" \
          f"\n" \
          f"<b>üîù–ü–æ–¥—Ä–æ–±–Ω–µ–µ</b> - /promokod\n" \
          f"\n" \
          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
          f"<b><i>–î–æ–Ω–∞—Ç –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è:</i></b>\n" \
          f"üë§–ü–æ –¥–æ–Ω–∞—Ç—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –í–ª–∞–¥–µ–ª—å—Ü–∞–º:\n" \
          f"<b>[1]</b> @Trykaban (–†—É–±–ª–∏)\n" \
          f"<b>[2]</b> @Ttypok (–¥—Ä. –≤–∞–ª—é—Ç–∞)\n" \
          f"\n" \
          f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä—É–±–ª—è–º–∏(@Trykaban):\n " \
          f"https://yoomoney.ru/to/4100118520230407\n" \
          f""
    await bot.send_message(msg.chat.id, txt, reply_markup=kb)


async def donat_buy(chat_id, kol, buyer, admin):
    global DONAT
    if buyer not in DONAT.keys():
        DONAT[buyer] = {
            "donat": 0
        }
    try:
        kol = int(kol)
        DONAT[buyer]['donat'] += kol
        save_DONAT()
        try:
            mention = "<a href='tg://user?id=" + buyer + "'>" + BD[buyer]['name'] + "</>"
            await bot.send_message(buyer, f"–í–∞–º –≤—ã–¥–∞–Ω–æ {kol} –¥–æ–Ω–∞—Ç –∫–æ–∏–Ω–æ–≤. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin}")
            await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id{buyer} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–∏ –¥–æ–Ω–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {kol} –¥–æ–Ω–∞—Ç –º–æ–Ω–µ—Ç–æ–∫ \n\n–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç - {mention}")
        except:
            mention = "<a href='tg://user?id=" + buyer + "'>" + BD[buyer]['name'] + "</>"
            await bot.send_message(chat_id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id{buyer} –Ω–µ—Ç—É –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ï–º—É –Ω–µ–±—ã–ª–æ –¥–æ—Ç–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ {kol} –¥–æ–Ω–∞—Ç –º–æ–Ω–µ—Ç–æ–∫ \n\n–µ–º—É –º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å - {mention}")
        await bot.send_message(group_logs, f"–í—ã–¥–∞–Ω –¥–æ–Ω–∞—Ç: {datetime.now()}\nADMIN: {admin}\nuser: {buyer}\nKOL: {kol}")
    except:
        await bot.send_message(chat_id, f"–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

#MINI GAMES
async def Gol_fun(kol, msg):
    user_id = str(msg.from_user.id)
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if kol < 1000:
            await bot.send_message(msg.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 –º–æ–Ω–µ—Ç")
        elif kol > BD[user_id]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            data = await bot.send_dice(msg.chat.id, emoji='‚öΩ')
            if int(data.dice.value) > 2:
                await bot.send_message(msg.chat.id, f"{mention}, ‚öΩ–ú—è—á –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x2")
                BD[user_id]['balance'] += kol
                BD[user_id]['win'] += kol
                if BD[user_id]['max_win'] < kol*2:
                    BD[user_id]['max_win'] = kol*2
            else:
                await bot.send_message(msg.chat.id, f"{mention}, ‚öΩ–ú—è—á –Ω–µ –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!")
                BD[user_id]['balance'] -= kol
                BD[user_id]['lose'] += kol

            if BD[user_id]['max_stavka'] < kol:
                BD[user_id]['max_stavka'] = kol
            save()

async def Bal_fun(kol, msg):
    user_id = str(msg.from_user.id)
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if kol < 1000:
            await bot.send_message(msg.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 –º–æ–Ω–µ—Ç")
        elif kol > BD[user_id]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            data = await bot.send_dice(msg.chat.id, emoji='üèÄ')
            if int(data.dice.value) > 3:
                await bot.send_message(msg.chat.id, f"{mention}, üèÄ–ú—è—á –ø–æ–ø–∞–ª –≤ –∫–æ–ª—å—Ü–æ! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x2")
                BD[user_id]['balance'] += kol
                BD[user_id]['win'] += kol
                if BD[user_id]['max_win'] < kol*2:
                    BD[user_id]['max_win'] = kol*2
            else:
                await bot.send_message(msg.chat.id, f"{mention}, üèÄ–ú—è—á –Ω–µ –ø–æ–ø–∞–ª –≤ –∫–æ–ª—å—Ü–æ. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!")
                BD[user_id]['balance'] -= kol
                BD[user_id]['lose'] += kol

            if BD[user_id]['max_stavka'] < kol:
                BD[user_id]['max_stavka'] = kol
            save()

async def Boul_fun(kol, msg):
    user_id = str(msg.from_user.id)
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if kol < 1000:
            await bot.send_message(msg.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 –º–æ–Ω–µ—Ç")
        elif kol > BD[user_id]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            data = await bot.send_dice(msg.chat.id, emoji='üé≥')
            if int(data.dice.value) == 6:
                await bot.send_message(msg.chat.id, f"{mention}, üé≥–°—Ç—Ä–∞–π–∫! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x2")
                BD[user_id]['balance'] += kol
                BD[user_id]['win'] += kol
                if BD[user_id]['max_win'] < kol*2:
                    BD[user_id]['max_win'] = kol*2
            else:
                await bot.send_message(msg.chat.id, f"{mention}, üé≥–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑—ë—Ç! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç -x0.5")
                BD[user_id]['balance'] -= kol/2
                BD[user_id]['lose'] += kol/2

            if BD[user_id]['max_stavka'] < kol:
                BD[user_id]['max_stavka'] = kol
            save()

async def Darts_fun(kol, msg):
    user_id = str(msg.from_user.id)
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if kol < 1000:
            await bot.send_message(msg.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 –º–æ–Ω–µ—Ç")
        elif kol > BD[user_id]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            data = await bot.send_dice(msg.chat.id, emoji='üéØ')
            if int(data.dice.value) == 6:
                await bot.send_message(msg.chat.id, f"{mention}, üéØ5 –∏–∑ 5! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x2")
                BD[user_id]['balance'] += kol
                BD[user_id]['win'] += kol
                if BD[user_id]['max_win'] < kol*2:
                    BD[user_id]['max_win'] = kol*2
            else:
                await bot.send_message(msg.chat.id, f"{mention}, üéØ–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑—ë—Ç! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç -x0.5")
                BD[user_id]['balance'] -= kol/2
                BD[user_id]['lose'] += kol/2

            if BD[user_id]['max_stavka'] < kol:
                BD[user_id]['max_stavka'] = kol
            save()

async def Spin_fun(kol, msg):
    user_id = str(msg.from_user.id)
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if kol < 1000:
            await bot.send_message(msg.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 –º–æ–Ω–µ—Ç")
        elif kol > BD[user_id]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            data = await bot.send_dice(msg.chat.id, emoji='üé∞')
            rez = projectSettings.get_combo_text(data.dice.value)
            l = {rez[0]:"1", rez[1]:"2", rez[2]:"3"}
            t = ""
            for i in rez:
                t += l[i]
            kolichestvo = {}
            for i in t:
                if i not in kolichestvo.keys():
                    kolichestvo[i] = 0
                kolichestvo[i] += 1
            max = 0
            for i, y in kolichestvo.items():
                if y > max:
                    max = y

            if max == 3:
                await bot.send_message(msg.chat.id, f"{mention}, üé∞–î–∂–µ–∫–ø–æ—Ç! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x3")
                BD[user_id]['balance'] += kol*2
                BD[user_id]['win'] += kol*3
                if BD[user_id]['max_win'] < kol*3:
                    BD[user_id]['max_win'] = kol*3
            elif max == 2:
                await bot.send_message(msg.chat.id, f"{mention}, üé∞2 –∏–∑ 3! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç x2")
                BD[user_id]['balance'] += kol
                BD[user_id]['win'] += kol
                if BD[user_id]['max_win'] < kol*2:
                    BD[user_id]['max_win'] = kol*2
            else:
                await bot.send_message(msg.chat.id, f"{mention}, üé∞–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!")
                BD[user_id]['balance'] -= kol
                BD[user_id]['lose'] += kol

            if BD[user_id]['max_stavka'] < kol:
                BD[user_id]['max_stavka'] = kol
            save()


##///////////////////         GAME

def color_make(num):
    if str(num) in ["1","3","5","7","9","11"]:
        return {"color":"üî¥", "name":"–∫—Ä–∞—Å–Ω—ã–π"}
    elif str(num) in ["2","4","6","8","10","12"]:
        return {"color":"‚ö´Ô∏è", "name":"—á—ë—Ä–Ω—ã–π"}
    elif str(num) in ["0"]:
        return {"color":"üíö", "name":"–∑–µ–ª—ë–Ω—ã–π"}

def money(kol, kkk):
    kol = str(kol)
    if kol[-1][-1] == "%":
        try:
            _kol = ""
            for i in kol:
                if i in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "%"]:
                    if i != "%":
                        _kol += i
                else:
                    return {"txt":"–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —á–∏—Å–ª–æ", "type":"error"}

            kol = _kol
            procent = int(kol)
            all = BD[kkk]['balance']
            money = int((all / 100) * procent)
            return {"txt":money, "type":"ok"}
        except:
            return {"txt":"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 1 –¥–æ 100%", "type":"error"}
    else:
        money = ""
        numers = 1
        for i in kol:
            if i in ["m","M","–ú","–º"]:
                money += "000000"
            elif i in ["k","K","–∫","–ö"]:
                money += "000"
            elif i in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]:
                money += i
            else:
                return {"txt":f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª [{i}]. –ü–æ–∑–∏—Ü–∏—è {numers}", "type":"error"}
            numers += 1

        return {"txt":money, "type":"ok"}

def money_form(mon):
    mon = str(mon)
    idd = -1
    ctr = 1
    rez = ""
    for i in range(len(mon)):
        if ctr == 4:
            ctr = 1
            rez += " "
        rez += mon[idd]
        ctr += 1
        idd -= 1

    rez = rez[::-1]
    return rez

async def All_chats(chat_id):
    D_list = {}
    for i, y in CHAT.items():
        D_list[i] = y['win']

    sorted_tuple = dict(sorted(D_list.items(), key=itemgetter(1)))
    sorted_tuple = dict(reversed(sorted_tuple.items()))

    idd = 1
    txt = ""
    for i, y in sorted_tuple.items():
        if i == "-4181636704":
            pass
        else:
            txt += f"{idd}. ID{i} - {money_form(y)}\n" \
                   f"  max_win: {CHAT[i]['max_win']} \n" \
                   f"  soo: {CHAT[i]['soo']}\n" \
                   f"  cmd: {CHAT[i]['cmd']}\n" \
                   f"  Link: {CHAT[i]['link']}\n"
            idd += 1
            if idd >= 16:
                break

    txt = f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(sorted_tuple)-1}\n" + txt + "\n\n!chat (num) -- –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ"
    await bot.send_message(chat_id, txt)

async def chek_vip(msg):
    kkk = str(msg.from_user.id)
    if kkk not in DONAT.keys():
        pass
    elif 'vip' not in DONAT[kkk].keys():
        pass
    else:
        if DONAT[kkk]['vip']['act']:
            date_last_farm = datetime.strptime(str(DONAT[kkk]['vip']["date"]), "%Y-%m-%d %H:%M:%S")
            date2 = datetime.strptime(str(msg.date), "%Y-%m-%d %H:%M:%S")
            tm = date2 - date_last_farm
            tm2 = int(tm.total_seconds() // 60)
            if tm2 * 60 >= 10:
                mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
                DONAT[kkk]['vip']['act'] = False
                save_DONAT()
                await bot.send_message(msg.chat.id, f"{mention}, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–∏–ø —Å—Ç–∞—Ç—É—Å :(")
async def vip_watch(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if kkk not in DONAT.keys():
        await bot.send_message(msg.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ—Ç—É –í–ò–ü —Å—Ç–∞—Ç—É—Å–∞ :(")
    elif 'vip' not in DONAT[kkk].keys():
        await bot.send_message(msg.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ—Ç—É –í–ò–ü —Å—Ç–∞—Ç—É—Å–∞ :(")
    else:
        if DONAT[kkk]['vip']['act']:
            if DONAT[kkk]['vip']['vp'] == 1:
                status = "GOLD VIP"
            elif DONAT[kkk]['vip']['vp'] == 2:
                status = "DIMOND VIP"
            await bot.send_message(msg.chat.id, f"{mention}, –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ {status}. \n\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {DONAT[kkk]['vip']['date']}")
        else:
            await bot.send_message(msg.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ—Ç—É –í–ò–ü —Å—Ç–∞—Ç—É—Å–∞ :(")
async def Top_List(chat_id, user_id, msg):
    global CHAT_USERS
    D_list = {}
    if msg.chat.type == "private":
        for i, y in BD.items():
            D_list[i] = y['balance']
        txt1 = f"üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º –≤ –±–æ—Ç–µ.\nüëë –í—Å–µ–≥–æ –≤ –±–æ—Ç–µ: {len(BD)}\n\n"
    else:
        await users_in_chat(chat_id, msg)
        await chek_user_in_chat(chat_id, user_id, msg)
        if chat_id not in CHAT_USERS.keys():
            await bot.send_message(chat_id, f"–ò–∑-–∑–∞ –ø—Ä–∞–≤–∏–ª —Ä–∞–±–æ—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Ç –æ—Ç –≤—Å–µ—Ö –≤ –±–æ—Ç–µ. –≠–¢–û –í–†–ï–ú–ï–ù–ù–û, –ù–£–ñ–ù–û –ù–ï–ú–ù–û–ì–û –ü–û–î–û–ñ–î–ê–¢–¨!")
            for i, y in BD.items():
                D_list[i] = y['balance']
            txt1 = f"üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º –≤ –±–æ—Ç–µ.\nüëë –í—Å–µ–≥–æ –≤ –±–æ—Ç–µ: {len(BD)}\n\n"
        else:
            chat_members = CHAT_USERS[chat_id]
            for i in chat_members:
                await registration(str(i))
                D_list[str(i)] = BD[str(i)]['balance']
                txt1 = f"üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º –≤ —á–∞—Ç–µ.\nüëë –í—Å–µ–≥–æ –≤ —á–∞—Ç–µ: {len(chat_members)}\n\n"

    sorted_tuple = dict(sorted(D_list.items(), key=itemgetter(1)))
    sorted_tuple = dict(reversed(sorted_tuple.items()))

    idd = 1
    txt = ""
    tp = ""
    for i, y in sorted_tuple.items():
        mention = "<a href='tg://user?id=" + i + "'>" + BD[i]['name'] + "</>"
        if idd == 1:
            txt += f"‚ë† {mention} - {money_form(y)} \n"
        if idd == 2:
            txt += f"‚ë° {mention} - {money_form(y)} \n"
        if idd == 3:
            txt += f"‚ë¢ {mention} - {money_form(y)} \n"
        if idd == 4:
            txt += f"‚ë£ {mention} - {money_form(y)} \n"
        if idd == 5:
            txt += f"‚ë§ {mention} - {money_form(y)} \n"
        if idd == 6:
            txt += f"‚ë• {mention} - {money_form(y)} \n"
        if idd == 7:
            txt += f"‚ë¶ {mention} - {money_form(y)} \n"
        if idd == 8:
            txt += f"‚ëß {mention} - {money_form(y)} \n"
        if idd == 9:
            txt += f"‚ë® {mention} - {money_form(y)} \n"
        if idd == 10:
            txt += f"‚ë© {mention} - {money_form(y)}"
        if user_id == i:
            txt_num = ""
            for i in str(idd):
                if i == "1":
                    txt_num += "‚ë†"
                if i == "2":
                    txt_num += "‚ë°"
                if i == "3":
                    txt_num += "‚ë¢"
                if i == "4":
                    txt_num += "‚ë£"
                if i == "5":
                    txt_num += "‚ë§"
                if i == "6":
                    txt_num += "‚ë•"
                if i == "7":
                    txt_num += "‚ë¶"
                if i == "8":
                    txt_num += "‚ëß"
                if i == "9":
                    txt_num += "‚ë®"
                if i == "0":
                    txt_num += "‚ì™"
            tp = f"\n\n{txt_num} {mention} - {money_form(y)}"
            if idd > 12:
                break
        idd += 1
        if idd >= 15 and tp != "":
            break
    txt1 += txt
    txt1 = txt1 + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ" + tp
    await bot.send_message(chat_id, txt1)

async def bank_deposit_time(user_id, date, status):
    date_last_farm = datetime.strptime(str(BANK[user_id]['time']), "%Y-%m-%d %H:%M:%S")
    date2 = datetime.strptime(str(date), "%Y-%m-%d %H:%M:%S")
    tm = date2 - date_last_farm
    tm2 = int(tm.total_seconds())
    mint = tm2 // 60
    if status in [2]:
        deltaTime = 12
    else:
        deltaTime = 24

    if int((mint // 60) // deltaTime) > 0:
        BAL = BANK[user_id]['deposit']
        PROC = BANK[user_id]['procent']

        for i in range(int((mint // 60) // 24)):
            BAL = int(BAL + int((BAL/100) * PROC))

        BANK[user_id]['deposit'] = BAL
        BANK[user_id]['time'] = date
        save_BANK()

async def limit_off(msg):
    user_id = str(msg.reply_to_message.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + str(msg.from_user.id) + "'>" + BD[str(msg.from_user.id)]['name'] + "</>"
    await registration(user_id)
    await asyncio.sleep(1)
    BD[user_id]['limit']['much'] = 0
    save()
    await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –æ–Ω—É–ª–∏—Ä–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç. ID: {user_id}")
    await bot.send_message(group_logs, f"{mention} –æ–Ω—É–ª–∏—Ä–æ–≤–∞–ª –õ–ò–ú–ò–¢, ID{user_id}")

async def bank_take(chat_id, user_id, kol, date):
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(chat_id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if user_id not in BANK.keys():
            BANK[user_id] = {
                "bank": 0,
                "deposit": 0,
                "chek_deposit": 0,
                "time": date,
                "procent": 1,
            }

        if BD[user_id]['balance'] < kol:
            await bot.send_message(chat_id, f"{mention}, –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        else:
            BANK[user_id]['bank'] += kol
            BD[user_id]['balance'] -= kol
            save_BANK()
            save()
            await bot.send_message(chat_id, f"{mention}, –≤ –∫–æ–ø–∏–ª–∫—É –ø–æ–ª–æ–∂–µ–Ω–æ {kol} \n\n–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –º–æ—è –∫–æ–ø–∏–ª–∫–∞")

async def chat_send(msg):
    chat_id = str(msg.chat.id)
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    txt_chat_inf = f"{mention}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —á–∞—Ç—É: \n\nID: {chat_id}\n—Å–æ–æ–±—â–µ–Ω–∏–π: {CHAT[chat_id]['msg']}\n–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {CHAT[chat_id]['max_stavka']}"
async def bank_give(chat_id, user_id, kol, date):
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(chat_id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if user_id not in BANK.keys():
            BANK[user_id] = {
                "bank": 0,
                "deposit": 0,
                "chek_deposit": 0,
                "time": date,
                "procent": 1,
            }

        if BANK[user_id]['bank'] < kol:
            await bot.send_message(chat_id, f"{mention}, –≤ –∫–æ–ø–∏–ª–∫–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—É–º–º—ã")
        else:
            BANK[user_id]['bank'] -= kol
            BD[user_id]['balance'] += kol
            save_BANK()
            save()
            await bot.send_message(chat_id, f"{mention}, –≤—ã –≤–∑—è–ª–∏ –∏–∑ –∫–æ–ø–∏–ª–∫–∏ {kol} \n\n–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –º–æ—è –∫–æ–ø–∏–ª–∫–∞")

async def deposit_give(chat_id, user_id, kol, date, status):
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(chat_id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if user_id not in BANK.keys():
            BANK[user_id] = {
                "bank": 0,
                "deposit": 0,
                "chek_deposit": 0,
                "time": date,
                "procent": 1,
            }
        await bank_deposit_time(user_id, date, status)
        if BANK[user_id]['deposit'] < kol:
            await bot.send_message(chat_id, f"{mention}, –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—É–º–º—ã")
        else:
            BANK[user_id]['deposit'] -= kol
            BANK[user_id]['time'] = date
            BD[user_id]['balance'] += kol

            save_BANK()
            save()
            await bot.send_message(chat_id, f"{mention}, –≤—ã –≤–∑—è–ª–∏ –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ {kol} \n\n–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –º–æ—è –∫–æ–ø–∏–ª–∫–∞")

async def deposit_take(chat_id, user_id, kol, date, status):
    kol = money(kol, user_id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if kol['type'] == "error":
        await bot.send_message(chat_id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    elif kol['type'] == "ok":
        kol = int(kol['txt'])
        if user_id not in BANK.keys():
            BANK[user_id] = {
                "bank": 0,
                "deposit": 0,
                "chek_deposit": 0,
                "time": date,
                "procent": 1,
            }
        await bank_deposit_time(user_id, date, status)
        if BD[user_id]['balance'] < kol:
            await bot.send_message(chat_id, f"{mention}, –£ –≤–∞—Å –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—É–º–º—ã")
        else:
            BANK[user_id]['deposit'] += kol
            BANK[user_id]['time'] = date
            BD[user_id]['balance'] -= kol

            save_BANK()
            save()
            await bot.send_message(chat_id, f"{mention}, –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç {kol} \n\n–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –º–æ—è –∫–æ–ø–∏–ª–∫–∞")

async def Lecenka(chat_id, user_id, kol):
    bt = InlineKeyboardMarkup()
    tr = True
    kol = money(kol, user_id)
    if kol['type'] == "error":
        await bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    else:
        kol = int(kol['txt'])
        for i in range(5):
            i += 1
            if tr:
                if random.randint(1, 100) > 50:
                    bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:0:0:{kol}"))
                else:
                    bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:1:0:{kol}"))
                    tr = False
            else:
                bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:0:0:{kol}"))

        bt.add(InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data=f"LecS_{user_id}:1:0:{kol}"))
        await bot.send_message(chat_id, "–í—ã –≤–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—É!\n –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:0 \n\n–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—É—é –ª–µc–µ–Ω–∫—É", reply_markup=bt)

async def play_rulet(chat_id, txt, user_id, stavka):
    global chat_ruletka
    L1 = txt.split(" ")
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if len(L1) > 1 and L1[1] in ["k", "K", "–ö", "–∫", "–ß", "—á", "–ó", "–∑"]:

        if user_id not in chat_ruletka[chat_id]['stavki'].keys():
            chat_ruletka[chat_id]['stavki'][user_id] = {"nm":[], "cl":[]}

        if int(stavka['txt']) > BD[user_id]['balance']:
            await bot.send_message(int(chat_id), f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç")
        elif int(stavka['txt']) < 1000:
            await bot.send_message(int(chat_id), f"{mention}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1000")
        else:
            if L1[1] in ["k", "K", "–ö", "–∫"]:
                pov = "–∫"
            elif L1[1] in ["–ß", "—á"]:
                pov = "—á"
            elif L1[1] in ["–ó", "–∑"]:
                pov = "–∑"
            again = False
            for i in chat_ruletka[chat_id]['stavki'][user_id]['cl']:
                if i['gm1'] == True:
                    again = True
            for i in chat_ruletka[chat_id]['stavki'][user_id]['nm']:
                if i['gm2'] == True:
                    again = True
            chat_ruletka[chat_id]['stavki'][user_id]['cl'].append({"color": pov, "gm1": True, "stavka_color": stavka['txt']})
            if again:
                await bot.send_message(chat_id, f"{mention}, –¥–æ–ø–æ–ª–Ω–∏–ª —Å—Ç–∞–≤–∫—É {stavka['txt']} –Ω–∞ {pov}")
            else:
                await bot.send_message(chat_id, f"{mention}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {stavka['txt']} –Ω–∞ {pov}")
            chek_stavki(chat_id, user_id)
            BD[user_id]['balance'] -= int(stavka['txt'])
            save()

    else:
        rule = True
        Comes = []
        summ = 0
        for i in L1[1::]:
            if i not in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "0"]:
                rule = False
                break
            else:
                Comes.append(i)
                summ += int(stavka['txt'])

        if int(stavka['txt']) < 1000 and rule:
            await bot.send_message(int(chat_id), f"{mention}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1000")
        elif rule:
            if BD[user_id]['balance'] < summ:
                await bot.send_message(chat_id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç")
            else:
                if user_id not in chat_ruletka[chat_id]['stavki'].keys():
                    chat_ruletka[chat_id]['stavki'][user_id] = {"nm":[], "cl":[]}

                chat_ruletka[chat_id]['stavki'][user_id]['nm'].append({"nums": Comes, "gm2": True, "stavka_num": stavka['txt']})
                again = False
                for i in chat_ruletka[chat_id]['stavki'][user_id]['cl']:
                    if i['gm1'] == True:
                        again = True
                for i in chat_ruletka[chat_id]['stavki'][user_id]['nm']:
                    if i['gm2'] == True:
                        again = True
                if again:
                    txt_upload = f"{mention}, –î–æ–ø–æ–ª–Ω–∏–ª —Å—Ç–∞–≤–∫—É: {stavka['txt']} –Ω–∞\n"
                else:
                    txt_upload = f"{mention}, –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {stavka['txt']} –Ω–∞\n"
                for i in Comes:
                    txt_upload += f"  {color_make(i)['color']}{i}\n"
                await bot.send_message(chat_id, txt_upload)
                chek_stavki(chat_id, user_id)
                BD[user_id]['balance'] -= int(summ)
                save()

def chek_stavki(chat_id, user_id):
    idd = 0
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['cl']:
        if i['gm1'] == False:
            del chat_ruletka[str(chat_id)]['stavki'][user_id]['cl'][idd]
        idd += 1
    idd = 0
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['nm']:
        if i['gm2'] == False:
            del chat_ruletka[str(chat_id)]['stavki'][user_id]['nm'][idd]
        idd += 1

async def pillow(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if BD[kkk]['balance'] < 25000:
        await bot.send_message(msg.chat.id, f"{mention}, –°—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–∞–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å–∏! –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å: {BD[kkk]['balance']}. \n\n+75 000. [DIMOND VIP]")
        BD[kkk]['balance'] += 75000
        save()

async def ewery_day_gold(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if DONAT[kkk]['vip']['bns'] != str(datetime.now().day):
        await bot.send_message(msg.chat.id, f"{mention}, –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° [GOLD VIP] +300 000")
        DONAT[kkk]['vip']['bns'] = str(datetime.now().day)
        save_DONAT()
        BD[kkk]['balance'] += 300000
        save()

async def ewery_day_dimond(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if DONAT[kkk]['vip']['bns'] != str(datetime.now().day):
        await bot.send_message(msg.chat.id, f"{mention}, –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° [DIMOND VIP] +1 000 000")
        DONAT[kkk]['vip']['bns'] = str(datetime.now().day)
        save_DONAT()
        BD[kkk]['balance'] += 1000000
        save()

async def vip_send(msg):
    user_id = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if user_id not in DONAT.keys():
        donat_kol = 0
    else:
        donat_kol = DONAT[user_id]['donat']
    txt = f"{mention}, <b>–ú–ê–ì–ê–ó–ò–ù –°–¢–ê–¢–£–°–û–í</b>\n" \
          f"\n" \
          f"üåÄ–í–∞—à –¥–æ–Ω–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: {donat_kol}\n" \
          f"" \
          f"<b>VIP GOLD</b>\n" \
          f"  <b>[1]</b> +10% –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n" \
          f"  <b>[2]</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–π –¥–æ—Ö–æ–¥(300–∫)\n" \
          f"<b>üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å: üåÄ100–∫ (100.000)</b>\n" \
          f"<b>üõí–ö—É–ø–∏—Ç—å: –ö–Ω–æ–ø–∫–∞(GOLD VIP| 100k)</b>\n" \
          f"\n" \
          f"<b>VIP DIMOND</b>\n" \
          f"  <b>[1]</b> +20% –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n" \
          f"  <b>[2]</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–π –¥–æ—Ö–æ–¥(1–∫–∫)\n " \
          f" <b>[3]</b> –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Ç–Ω–æ—Å—Ç–∏ /pillow\n" \
          f"  <b>[4]</b> –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Ä–æ—Å—Ç 24—á -> 12—á\n" \
          f"<b>üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å: üåÄ300–∫ (300.000)</b>\n" \
          f"<b>üõí–ö—É–ø–∏—Ç—å: –ö–Ω–æ–ø–∫–∞(DIMOND VIP| 300k)</b>\n" \
          f"\n" \
          f"‚ùóÔ∏è<b>–í–∏–ø —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!</b>"
    kb = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("GOLD VIP| 100k", callback_data="buygold")
    b2 = InlineKeyboardButton("DIMOND VIP| 300k", callback_data="buydimond")
    kb.add(b1)
    kb.add(b2)
    await bot.send_message(msg.chat.id, txt, reply_markup=kb)

async def start_rulet(chat_id):
    global chat_ruletka, ruletka_in, CHAT
    soo = await bot.send_message(chat_id, "–†—É–¥–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –£ –≤–∞—Å 15 —Å–µ–∫...")
    await asyncio.sleep(5)

    await bot.edit_message_text("–†—É–¥–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –£ –≤–∞—Å 10 —Å–µ–∫...", chat_id, soo.message_id)
    await asyncio.sleep(5)

    await bot.edit_message_text("–†—É–¥–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –£ –≤–∞—Å 5 —Å–µ–∫...", chat_id, soo.message_id)
    await asyncio.sleep(5)

    await bot.edit_message_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ –Ω–∏–∂–µ!", chat_id, soo.message_id)

    color_Upset = {"—á—ë—Ä–Ω—ã–π":"—á", "–∫—Ä–∞—Å–Ω—ã–π":"–∫", "–∑–µ–ª—ë–Ω—ã–π":"–∑"}
    rand_num = random.randint(0, 12)
    colors = color_make(rand_num)
    t_end = "\n\n"
    t_start = f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rand_num}{colors['color']} \n\n"
    Perfect_color = color_Upset[colors['name']]
    chat_ruletka[chat_id]['log'].append(f"{colors['color']}{rand_num}")
    if len(chat_ruletka[chat_id]['log']) >= 21:
        chat_ruletka[chat_id]['log'].pop(0)

    for i, y in chat_ruletka[chat_id]['stavki'].items():
        mention = "<a href='tg://openmessage?user_id=" + i + "'>" + BD[i]['name'] + "</>"
        idd = 0
        for _i in y['cl']:
            if _i['color'] == Perfect_color and _i['gm1']:
                t_end += f"{mention}, –≤—ã—ã–π–≥—Ä–∞–ª {int(_i['stavka_color'])} \n"
                t_start += f"{mention}, –ø–æ—Å—Ç–∞–≤–∏–ª {_i['stavka_color']} –Ω–∞ {_i['color']} \n"
                BD[i]['balance'] += int(_i['stavka_color']) * 2
                if BD[i]['max_win'] < int(_i['stavka_color']):
                    BD[i]['max_win'] = int(_i['stavka_color'])
                if CHAT[chat_id]['max_win'] < int(_i['stavka_color']):
                    CHAT[chat_id]['max_win'] = int(_i['stavka_color'])
            elif rand_num == 0  and _i['gm1']:
                t_end += f"{mention}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {int(_i['stavka_color'])/2} \n"
                BD[i]['balance'] += int(_i['stavka_color'])/2
                BD[i]['lose'] += int(_i['stavka_color'])/2
            elif _i['color'] != Perfect_color  and _i['gm1']:
                t_start += f"{mention}, –ø–æ—Å—Ç–∞–≤–∏–ª {_i['stavka_color']} –Ω–∞ {_i['color']} \n"
                #BD[i]['balance'] -= int(_i['stavka_color'])
                BD[i]['lose'] += int(_i['stavka_color'])
            if BD[i]['max_stavka'] < int(_i['stavka_color']) and _i['gm1']:
                BD[i]['max_stavka'] = int(_i['stavka_color'])

            save()
            save_CHAT()
            chat_ruletka[chat_id]['stavki'][i]['cl'][idd]['gm1'] = False
            idd += 1
        idd = 0
        for _x in y['nm']:
            for _i in _x['nums']:
                if _i == str(rand_num) and _x['gm2']:
                    t_end += f"{mention}, –≤—ã—ã–π–≥—Ä–∞–ª {int(_x['stavka_num'])*11} \n"
                    t_start += f"{mention}, –ø–æ—Å—Ç–∞–≤–∏–ª {_x['stavka_num']} –Ω–∞ {_i} \n"
                    BD[i]['balance'] += int(_x['stavka_num'])*12
                    if BD[i]['max_win'] < int(_x['stavka_num'])*12:
                        BD[i]['max_win'] = int(_x['stavka_num'])*12
                    if CHAT[chat_id]['max_win'] < int(_x['stavka_num'])*12:
                        CHAT[chat_id]['max_win'] = int(_x['stavka_num'])*12
                    BD[i]['win'] += int(_x['stavka_num'])*12
                    CHAT[chat_id]['win'] += int(_x['stavka_num'])*12
                else:
                    if _x['gm2']:
                        t_start += f"{mention}, –ø–æ—Å—Ç–∞–≤–∏–ª {_x['stavka_num']} –Ω–∞ {_i} \n"
                        #BD[i]['balance'] -= int(_x['stavka_num'])
                        BD[i]['lose'] += int(_x['stavka_num'])

                if BD[i]['max_stavka'] < int(_x['stavka_num']) and _x['gm2']:
                    BD[i]['max_stavka'] = int(_x['stavka_num'])

                save_CHAT()
                save()
            chat_ruletka[chat_id]['stavki'][i]['nm'][idd]['gm2'] = False
            idd += 1
    ruletka_in[str(chat_id)] = False
    await bot.send_message(chat_id, t_start + t_end, reply_to_message_id=soo.message_id)

async def start_blackJ(msg, kol):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    kol = money(kol, kkk)
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"{mention}, —Å—Ç–∞–≤–∫—É")
    else:
        if int(kol['txt']) > BD[kkk]['balance']:
            await bot.send_message(msg.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏")
        elif int(kol['txt']) < 1000:
            await bot.send_message(msg.chat.id, f"{mention}, –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1000")
        else:
            if msg.chat.type != "private":
                await bot.send_message(msg.chat.id, f"{mention}, –ò–≥–∞—Ç—å –≤ —ç—Ç—É –∏–≥—Ä—É —É–¥–æ–±–Ω–µ–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—É—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ! –í—Å—ë –∫ –≤–∞—à–µ–º—É —É–¥–æ–±—Å—Ç–≤—É!")

            BD[kkk]['balance'] -= int(kol['txt'])
            save()

            await bot.send_message(msg.chat.id, f"{mention}, –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°—Ç–∞–≤–∫–∞: {kol['txt']} \n–í–∞—à id(–∏–≥—Ä—ã): {kkk}\n–ö–∞—Ä—Ç—ã –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è!\n\n21 –æ—á–∫–æ - –º–Ω–æ–∂–∏—Ç–µ–ª—å X3\n–ü—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ - –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤—Å—ë")
            BlackJack[kkk] = {"stavka": int(kol['txt']), "user": 0, "diller":0}
            t = random.randint(2, 10) + random.randint(2, 10)
            BlackJack[kkk]['user'] += t
            BlackJack[kkk]['diller'] += random.randint(2, 10) + random.randint(2, 10)
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("ü§ë–£–¥–≤–æ–∏—Ç—å", callback_data=f"BJDBL_{kkk}"))
            kb.add(InlineKeyboardButton("üòé–í–∑—è—Ç—å", callback_data=f"BJTK_{kkk}"))
            kb.add(InlineKeyboardButton("üëå–•–≤–∞—Ç–∏—Ç", callback_data=f"BJSTP_{kkk}"))
            await bot.send_message(msg.chat.id, f"üë§{mention}, –î–∏–ª–ª–µ—Ä –≤—ã–¥–∞–ª –ø–æ –¥–≤–µ –∫–∞—Ä—Ç—ã. –í–∞—à–∏ –æ—á–∫–∏: {t}. \n\nüëæ–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=kb)

async def start_drivars(msg):
    user_id = str(msg.from_user.id)
    chat_id = str(msg.chat.id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if chat_id in Drive.keys():
        await bot.send_message(msg.chat.id, f"{mention}, –≥–æ–Ω–∫–∞ —É–∂–µ –∏–¥—ë—Ç!")
    else:
        Drive[chat_id] = {"start":str(msg.date), "stavki":{}, "max":0}
        soo = await bot.send_message(msg.chat.id, f"–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                                            f"   üöó  | –º1 1%\n"
                                            f"   üöï  | –º2 1%\n"
                                            f"   üöô  | –º3 1%\n"
                                            f"   üöì  | –º4 1%\n"
                                            f"   üèé  | –º5 1%\n")
        winers = []
        lst_rn = {"1": 0, "2":0, "3":0, "4": 0, "5":0}
        lst = {"1":"üöó", "2":"üöï", "3":"üöô", "4":"üöì", "5":"üèé"}
        await asyncio.sleep(10)
        while True:
            stop_chek = False
            for i in range(5):
                i += 1
                lst_rn[str(i)] += random.randint(0, 15)
                if lst_rn[str(i)] > Drive[chat_id]['max']:
                    Drive[chat_id]['max'] = lst_rn[str(i)]

            for i in range(5):
                i += 1
                if lst_rn[str(i)] >= 100:
                    winers.append(str(i))
                    stop_chek = True
            if stop_chek:
                break
            if random.randint(0, 100) > 65:
                txt_cars = f"–ì–æ–Ω–∫–∞ –∏–¥—ë—Ç!\n"\
                            f"   üöó  | –º1 {lst_rn['1']}%\n"\
                            f"   üöï  | –º2 {lst_rn['2']}%\n"\
                            f"   üöô  | –º3 {lst_rn['3']}%\n"\
                            f"   üöì  | –º4 {lst_rn['4']}%\n"\
                            f"   üèé  | –º5 {lst_rn['5']}%\n"
                soo = await bot.edit_message_text(txt_cars, msg.chat.id, soo.message_id)
            await asyncio.sleep(8)

        proigral = ""
        wigral = ""
        txt = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏:\n" \
              f"\n\n"
        for i in winers:
            txt += f"–î–æ–±—Ä–∞–ª–∞—Å—å –¥–æ —Ñ–∏–Ω–∏—à–∞ –º–∞—à–∏–Ω–∞ {lst[str(i)]}\n"
        txt += "\n"
        for i, y in Drive[chat_id]['stavki'].items():
            mention = "<a href='tg://openmessage?user_id=" + i + "'>" + BD[i]['name'] + "</>"
            for _i in y:
                if str(_i['num']) in winers:
                    wigral += f"{mention}, –≤—ã–∏–≥—Ä–∞–ª(–∞) {int(_i['kol'])*2}üíµ {lst[_i['num']]}\n"
                    BD[i]['balance'] += int(_i['kol'])*2
                else:
                    proigral += f"{mention}, –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) {_i['kol']}üíµ {lst[_i['num']]}\n"
                save()
        txt += proigral
        txt += "\n"
        txt += wigral
        await bot.send_message(msg.chat.id, txt)
        del Drive[chat_id]

async def drive_make_stavka(msg, L1):
    user_id = str(msg.from_user.id)
    chat_id = str(msg.chat.id)
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if chat_id not in Drive.keys():
        await bot.send_message(msg.chat.id, f"{mention}, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –≥–æ–Ω–∫—É! \n–ö–æ–º–∞–Ω–¥–∞: !–ì–æ–Ω–∫–∞")
    else:
        kol = money(L1[1], user_id)
        nm = L1[0][-1]
        if kol['type'] == "error":
            await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ(–î–æ—Å—Ç—É–ø–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: –ú –ö)")
        else:
            if int(kol['txt']) < 1000:
                await bot.send_message(msg.chat.id, f"{mention}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1000")
            elif Drive[chat_id]['max'] >= 80:
                await bot.send_message(msg.chat.id, f"{mention}, —Å—Ç–∞–≤–∫–∏ —É–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ñ–¥—ë–º –∫–æ–Ω—Ü–∞!")
            else:
                if user_id not in Drive[chat_id]['stavki'].keys():
                    Drive[chat_id]['stavki'][user_id] = []
                Drive[chat_id]['stavki'][user_id].append({"num":nm, "kol":kol['txt']})
                BD[user_id]['balance'] -= int(kol['txt'])
                save()
                await bot.send_message(msg.chat.id, f"{mention} –ø–æ—Å—Ç–∞–≤–∏–ª {kol['txt']} –Ω–∞ {L1[0]}")

async def log_fun(chat_id, user_id):
    global chat_ruletka
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    t1 = f"{mention}, –ª–æ–≥ –≥—Ä—É–ø–ø—ã:\n"
    for i in chat_ruletka[chat_id]['log']:
        t1 = t1 + i + "\n"

    await bot.send_message(chat_id, t1)

async def povtor_stavka(chat_id, user_id):
    global chat_ruletka
    t1 = ""
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    if user_id not in chat_ruletka[chat_id]['stavki'].keys():
        chat_ruletka[chat_id]['stavki'][user_id] = {"nm":[], "cl":[]}
    idd = 0
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['cl']:
        chat_ruletka[str(chat_id)]['stavki'][user_id]['cl'][idd]['gm1'] = True
        t1 += f"<b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞</b> {i['stavka_color']} –Ω–∞ {i['color']}\n"
        idd += 1
    idd = 0
    t1 += "\n"
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['nm']:
        chat_ruletka[str(chat_id)]['stavki'][user_id]['nm'][idd]['gm2'] = True
        t1 += f"<b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ {chat_ruletka[str(chat_id)]['stavki'][user_id]['nm'][idd]['stavka_num']} –Ω–∞:</b>\n"
        for _i in i['nums']:
            t1 += f"  {color_make(_i)['color']}{_i}\n"
        idd += 1

    if t1 == "":
        await bot.send_message(chat_id, f"{mention}, —É–≤—ã. –ü—Ä–æ—à–ª—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        t1 = f"{mention}, –ø—Ä–æ—à–ª—ã–µ —Å—Ç–∞–≤–∫–∏: \n\n" + t1
        await bot.send_message(chat_id, t1)

async def stavki(chat_id, user_id):
    if user_id not in chat_ruletka[chat_id]['stavki'].keys():
        chat_ruletka[chat_id]['stavki'][user_id] = {"nm":[], "cl":[]}
    t1 = ""
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    idd = 0
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['cl']:
        if i['gm1'] == True:
            chat_ruletka[str(chat_id)]['stavki'][user_id]['cl'][idd]['gm1'] = True
            t1 += f"<b>—Å—Ç–∞–≤–∫–∞</b> {i['stavka_color']} –Ω–∞ {i['color']}\n"
        idd += 1
    idd = 0
    t1 += "\n"
    for i in chat_ruletka[str(chat_id)]['stavki'][user_id]['nm']:
        if i['gm2'] == True:
            chat_ruletka[str(chat_id)]['stavki'][user_id]['nm'][idd]['gm2'] = True
            t1 += f"<b>—Å—Ç–∞–≤–∫–∞ {chat_ruletka[str(chat_id)]['stavki'][user_id]['nm'][idd]['stavka_num']} –Ω–∞:</b>\n"
            for _i in i['nums']:
                t1 += f"  {color_make(_i)['color']}{_i}\n"
        idd += 1

    if t1 == "":
        await bot.send_message(chat_id, f"{mention}, –í–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        t1 = f"{mention}, –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏: \n\n" + t1
        await bot.send_message(chat_id, t1)

PROMO_BITWIN = {}
async def make_promo(msg, name, kol, mon):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if kkk not in DONAT.keys():
        await bot.send_message(msg.chat.id, f"{mention}, —É –≤—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç –∫–æ–∏–Ω–æ–≤!")
    else:
        kol = money(kol, kkk)
        if kol['type'] == "error":
            await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –ø–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
        else:
            mon = money(mon, kkk)
            if mon['type'] == "error":
                await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–∏–∑–∞—Ö!")
            else:
                if len(name) < 2 or len(name) > 12:
                    await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –±–æ–ª–µ–µ 2 –∏ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    if name in PF['promo'].keys():
                        await bot.send_message(msg.chat.id, f"{mention}, –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
                    else:
                        if int(kol['txt']) * int(mon['txt']) > BD[kkk]['balance']:
                            await bot.send_message(msg.chat.id, f"{mention}, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ: {int(kol['txt']) * int(mon['txt'])}")
                        else:
                            kb = InlineKeyboardMarkup()
                            kb.add(InlineKeyboardButton("–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏(50–∫üåÄ)", callback_data=f"promoNotId_{kkk}"))
                            soo = await bot.send_message(msg.chat.id, f"{mention}, –û—Ç–ø—Ä–∞–≤—Ç–µ id –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ò –¥–æ–±–∞–≤—Ç–µ –≤ –Ω–µ–≥–æ –±–æ—Ç–∞(—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) \n\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É, –≤–µ–¥—É—â—É—é –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
                            PROMO_BITWIN[kkk] = {"name": name, "kol": int(kol['txt']), "mon": int(mon['txt']), "idd":"000", "type":"0", "chat": str(msg.chat.id), "msg": str(soo.message_id)}


async def chek_promo(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if kkk in PROMO_BITWIN.keys() and PROMO_BITWIN[kkk]['type'] == "0" and str(msg.chat.id) == PROMO_BITWIN[kkk]['chat']:
        L1 = msg.text.split(" ")
        if len(L1) == 2:
            idd = L1[0]
            link = L1[1]
            PROMO_BITWIN[kkk]['idd'] = idd
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å (50–∫üåÄ)", callback_data=f"promoId_{kkk}"))
            txt_promo = f"{mention}, –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n" \
                        f"–ò–º—è: {PROMO_BITWIN[kkk]['name']}\n" \
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {PROMO_BITWIN[kkk]['kol']}\n" \
                        f"ID –ö–∞–Ω–∞–ª–∞: {PROMO_BITWIN[kkk]['idd']}\n\n" \
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: 50–∫üåÄ"
            PROMO_BITWIN[kkk]['type'] = "1"
            PROMO_BITWIN[kkk]['link'] = link
            await bot.delete_message(PROMO_BITWIN[kkk]['chat'], PROMO_BITWIN[kkk]['msg'])
            await asyncio.sleep(1)
            soo = await bot.send_message(msg.chat.id, txt_promo, reply_markup=kb)
            PROMO_BITWIN[kkk]['msg'] = soo.message_id
        else:
            await bot.send_message(msg.chat.id, f"{mention}, –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª id –∫–∞–Ω–∞–ª–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.")


async def perevod(chat_id, user_id, replly_usser_id, much):
    global BD, LIMIT

    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    mention2 = "<a href='tg://openmessage?user_id=" + replly_usser_id + "'>" + BD[replly_usser_id]['name'] + "</>"
    much = money(much, user_id)
    if much['type'] == "ok":
        if BD[user_id]['balance'] < int(much['txt']) and BD[user_id]['admin'] == False:
            await bot.send_message(chat_id, f"{mention}, —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–∞–∫–æ–π —Å—É–º–º—ã")
        else:
            if LIMIT - BD[user_id]['limit']['much'] - int(much['txt']) < 0 and BD[user_id]['admin'] == False:
                await bot.send_message(chat_id, f"{mention}, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç ({LIMIT - BD[user_id]['limit']['much'] - int(much['txt'])}/{LIMIT}) \n\nP.S –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ {LIMIT - (LIMIT - BD[user_id]['limit']['much'])}")
            else:
                if BD[user_id]['admin'] == False:
                    BD[user_id]['balance'] -= int(much['txt'])
                    BD[user_id]['limit']['much'] += int(much['txt'])
                else:
                    await bot.send_message(group_logs, f"–í—ã–¥–∞–Ω—ã –º–æ–Ω–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. {datetime.now()}\nAdmin: tg://openmessage?user_id={user_id}\nUser: tg://openmessage?user_id={replly_usser_id}\n\nKol: {much['txt']}")
                BD[user_id]['give'] += int(much['txt'])
                BD[replly_usser_id]['take'] += int(much['txt'])

                BD[replly_usser_id]['balance'] += int(much['txt'])

                save()
                await bot.send_message(chat_id, f"{mention}, –ø–µ—Ä–µ–≤—ë–ª {much['txt']} —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É {mention2}")

async def chat_inf(chat_id, chat):
    soo = await bot.send_message(chat_id, "–ü–æ–∏—Å–∫ —á–∞—Ç–∞!")
    idd = 1
    chat_found = ""
    for i in CHAT.keys():
        if i == "-4181636704":
            pass
        else:
            if str(idd) == chat:
                chat_found = i
            idd += 1

    if chat_found == "":
        await bot.edit_message_text("–£–≤—ã, –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", chat_id, soo.message_id)
    else:
        txt = f"CHAT ID: {chat_found}\n" \
              f"Link: {CHAT[chat_found]['link']}\n" \
              f"—Å–æ–æ–±—â–µ–Ω–∏–π: {CHAT[chat_found]['soo']}\n" \
              f"–∫–æ–º–∞–Ω–¥—ã: {CHAT[chat_found]['cmd']}\n" \
              f"–≤—ã–∏–≥—Ä–∞–Ω–æ: {CHAT[chat_found]['win']}\n" \
              f"–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à: {CHAT[chat_found]['max_win']}"
        await bot.send_message(chat_id, txt, reply_to_message_id=soo.message_id)

async def prof_fun(chat_id, user_id):
    mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
    b_prof = InlineKeyboardMarkup()
    b_prof.add(InlineKeyboardButton("üí¨–ß–∞—Ç", url=chat_link))
    b_prof.add(InlineKeyboardButton("–ö–∞–Ω–∞–ª", url=chanel_link))
    txt = f"{mention}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n" \
          f"ü™™ID. {user_id} \n" \
          f"    üí∞–ú–æ–Ω–µ—Ç—ã ‚ßΩ {BD[user_id]['balance']} \n" \
          f"    üì®–ü–µ—Ä–µ–¥–∞–Ω–æ ‚ßΩ {BD[user_id]['give']}\n" \
          f"    üì©–ü–æ–ª—É—á–µ–Ω–æ ‚ßΩ {BD[user_id]['take']}\n" \
          f"    üèÜ–≤—ã–∏–≥—Ä–∞–ª ‚ßΩ {BD[user_id]['win']}\n" \
          f"    ‚ùå–ø—Ä–æ–∏–≥—Ä–∞–ª ‚ßΩ {BD[user_id]['lose']}\n\n" \
          f"    üé≤–ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à ‚ßΩ {BD[user_id]['max_win']} \n" \
          f"    üé≤–ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ ‚ßΩ {BD[user_id]['max_stavka']}\n"
    await bot.send_photo(chat_id, open("assets/photo_2024-04-28 11.59.43.jpeg", "rb"), caption=txt, reply_markup=b_prof)

async def show_prof(chat_id, user_id):
    if user_id not in BD.keys():
        mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + "'–ù–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–π'" + "</>"
        await bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {mention}, id: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        mention = "<a href='tg://openmessage?user_id=" + user_id + "'>" + BD[user_id]['name'] + "</>"
        txt = f"–ü—Ä–æ—Ñ–∏–ª—å {mention}\n" \
              f"ID. {user_id} \n" \
              f"    –ú–æ–Ω–µ—Ç—ã ‚ßΩ {BD[user_id]['balance']} \n" \
              f"    –ü–µ—Ä–µ–¥–∞–Ω–æ ‚ßΩ {BD[user_id]['give']}\n" \
              f"    –ü–æ–ª—É—á–µ–Ω–æ ‚ßΩ {BD[user_id]['take']}\n" \
              f"    –≤—ã–∏–≥—Ä–∞–ª ‚ßΩ {BD[user_id]['win']}\n" \
              f"    –ø—Ä–æ–∏–≥—Ä–∞–ª ‚ßΩ {BD[user_id]['lose']}\n\n" \
              f"    –ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à ‚ßΩ {BD[user_id]['max_win']} \n" \
              f"    –ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ ‚ßΩ {BD[user_id]['max_stavka']}\n"
        await bot.send_photo(chat_id, open("assets/photo_2024-04-28 11.59.43.jpeg", "rb"), caption=txt)

async def send_ref(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    if kkk not in REF.keys():
        REF[kkk] = {
            "usr": []
        }
        save_REF()
    txt = f"<b><i>{mention}, –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</i></b>\n" \
          f"‚ùóÔ∏è –ü—Ä–∏–≥–ª–∞—à–∞—è –ª—é–¥–µ–π –≤ –±–æ—Ç–∞, –≤—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—É—á–∞–µ—Ç–µ:\n" \
          f" ‚Ä¢ 100.000 üí∞\n" \
          f"\n" \
          f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏èÔ∏è\n" \
          f"<b><i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:</i></b>\n" \
          f" ‚Ä¢ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/GMCasioBot?start={kkk }\n" \
          f" ‚Ä¢ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–æ—Å—å: {len(REF[kkk]['usr'])}\n" \
          f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏èÔ∏è\n" \
          f"<b><i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</i></b>\n" \
          f" ‚Ä¢ 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: 250 000üí∞\n" \
          f" ‚Ä¢ 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: 300 000üí∞\n" \
          f" ‚Ä¢ 15 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: 1 000 000üí∞\n" \
          f" ‚Ä¢ 20 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: 1 500 000üí∞\n" \
          f" ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç... "
    await bot.send_message(msg.chat.id, txt)

async def send_part(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if kkk not in WORK.keys():
        await bot.send_message(msg.chat.id, f"–í—ã –Ω–µ –ø–∞—Ä—Ç–Ω—ë—Ä. –ù–æ –º–æ–∂–µ—Ç–µ –∏–º —Å—Ç–∞—Ç—å! \n\n–°–≤—è–∑—å: @Trykaban || @Ttypok")
    else:
        await bot.send_message(msg.chat.id, f"{mention}, –≤–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n"
                                            f"üîó–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/GMCasioBot?start={WORK[kkk]['lnk']}\n"
                                            f"üë§–ò–Ω–≤–∞–π—Ç–æ–≤: {WORK[kkk]['kol']}\n"
                                            f"üí¨–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö: {WORK[kkk]['msg']}\n"
                                            f"\n"
                                            f"üó£–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Ç! –¢–∞–º —á–∞—â–µ –∏ –±–æ–ª—å—à–µ –º—ã –≤—ã–¥–∞—ë–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π!\n"
                                            f"‚ö°Ô∏è–ß–∞—Ç - {partner_chat_link}")

def timer(chat_id, user_id, msg):
    global BD, PF
    date_last_farm = datetime.strptime(str(PF['date']), "%Y-%m-%d %H:%M:%S")
    date2 = datetime.strptime(str(msg.date), "%Y-%m-%d %H:%M:%S")
    tm = date2 - date_last_farm
    tm2 = int(tm.total_seconds())
    if tm2 >= 43200:
        PF['id'] += 1
        PF['date'] = str(msg.date)
        save_PF()

def person_limit(user_id):
    global BD, PF
    if BD[user_id]['limit']['time'] != str(PF['id']):
        BD[user_id]['limit']['time'] = str(PF['id'])
        BD[user_id]['limit']['much'] = 0
        save()

def chat_ruletka_fun(kkk):
    global chat_ruletka
    if kkk not in chat_ruletka:
        chat_ruletka[kkk] = {"log":[], "stavki":{}}

async def Promo(msg, promo):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if promo not in PF['promo'].keys():
        await bot.send_message(msg.chat.id, f"{mention}, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç—É")
    else:
        if PF['promo'][promo]['end'] == "full":
            limit = True
        else:
            if PF['promo'][promo]['end'] > 0:
                limit = True

            else:
                limit = False
                await bot.send_message(msg.chat.id, f"{mention}, –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", reply_to_message_id=msg.message_id)
        if kkk in PF['promo'][promo]['activ']:
            limit = False
            await bot.send_message(msg.chat.id, f"{mention}, –≤—ã —É–∂–µ –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏!", reply_to_message_id=msg.message_id)
        if limit:
            if PF['promo'][promo]['id'] != "000":
                if "link" not in PF['promo'][promo].keys():
                    PF['promo'][promo]['link'] = "None"

                chek_chanel = True
                try:
                    user_channel_status = await bot.get_chat_member(chat_id=PF['promo'][promo]['id'], user_id=kkk)
                    if user_channel_status["status"] != 'left':
                        chanel = True
                    else:
                        await bot.send_message(msg.chat.id, f"{mention}, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! Link: {PF['promo'][promo]['link']}")
                        chanel = False
                except:
                    await bot.send_message(msg.chat.id, f"{mention}, —É–≤—ã. –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º!")
            else:
                chek_chanel = False

            t1 = ""
            if chek_chanel:
                if chanel:
                    if PF['promo'][promo]['win'] == "balance":
                        t1 = f"{mention}, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {promo}, –∏ –ø–æ–ª—É—á–∏–ª–∏ +{PF['promo'][promo]['kol']} –º–æ–Ω–µ—Ç"
                        PF['promo'][promo]['end'] -= 1
                    BD[kkk][PF['promo'][promo]['win']] += int(PF['promo'][promo]['kol'])
                    PF['promo'][promo]['activ'].append(kkk)
                    save()
                    await bot.send_message(msg.chat.id, t1, reply_to_message_id=msg.message_id)
            else:
                if PF['promo'][promo]['win'] == "balance":
                    t1 = f"{mention}, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {promo}, –∏ –ø–æ–ª—É—á–∏–ª–∏ +{PF['promo'][promo]['kol']} –º–æ–Ω–µ—Ç"
                    PF['promo'][promo]['end'] -= 1
                BD[kkk][PF['promo'][promo]['win']] += int(PF['promo'][promo]['kol'])
                PF['promo'][promo]['activ'].append(kkk)
                save()
                await bot.send_message(msg.chat.id, t1, reply_to_message_id=msg.message_id)
        save_PF()

async def send_ban(msg, status):
    if status == "1":
        await bot.send_message(msg.chat.id, "–ó–∞–±–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ. –ö–æ–≥–¥–∞ –±–æ—Ç –∑–∞–º–µ—Ç–∏—Ç —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–∞–∫–æ–º-–Ω–∏–±—É–¥—å —á–∞—Ç–µ, –æ–Ω –µ–º—É —Å–æ–æ–±—â–∏—Ç")
    elif status == "2":
        await bot.send_message(msg.chat.id, "–ó–∞–±–∞–Ω–µ–Ω, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")

async def give_ban_id(msg, l1):
    kkk2 = str(l1[2])
    mention = "<a href='tg://openmessage?user_id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
    sec = l1[1]
    clock = datetime.now() + timedelta(seconds=int(sec))
    txt_ban = f"{mention}, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {BD[str(msg.from_user.id)]['name']}\n" \
              f"\n" \
              f"–¥–∞—Ç–∞ –≤ –±–æ—Ç–µ: {datetime.now()}\n" \
              f"–±–∞–Ω –¥–æ: {clock} || ({sec} —Å–µ–∫—É–Ω–¥) ||\n" \
              f"\n" \
              f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ - /status\n" \
              f"‚ùì–ù–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π !—Ä–µ–ø. –¢–∞–∫ –æ–Ω–æ –¥–æ–π–¥—ë—Ç –¥–æ –Ω–∞—Å!"
    try:
        await bot.send_message(kkk2, txt_ban)
        status = "2"
    except:
        status = "1"
    BAN[kkk2] = {"time":str(clock), "status":status}
    save_Ban()
    await send_ban(msg, status)
    await bot.send_message(group_logs, f"–ë–∞–Ω, {datetime.now()}\n\nAdmin: {msg.from_user.id}\nUser: {kkk2}")

async def unban_id(msg, L1):
    kkk2 = str(L1[1])
    mention = "<a href='tg://openmessage?user_id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
    if kkk2 not in BAN.keys():
        await bot.send_message(msg.chat.id, f"–Ω–∞ –Ω–µ–≥–æ –Ω–µ –Ω–∞–ª–æ–∂–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    else:
        del BAN[kkk2]
        save_Ban()
        try:
            await bot.send_message(kkk2, f"{mention}, —Å –≤–∞—Å —Å–Ω—è—Ç –±–∞–Ω! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã")
            await bot.send_message(msg.chat.id, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –∏–≥—Ä–æ–∫–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ - tg://openmessage?user_id={kkk2}")
        except:
            await bot.send_message(msg.chat.id, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –∏–≥—Ä–æ–∫–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ - tg://openmessage?user_id={kkk2}")
        await bot.send_message(group_logs, f"–†–∞–∑–±–∞–Ω, {datetime.now()}\n\nAdmin: {msg.from_user.id}\nUser: {kkk2}")
async def give_ban(msg, l1):
    kkk2 = str(msg.reply_to_message.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
    sec = l1[1]
    clock = datetime.now() + timedelta(seconds=int(sec))
    txt_ban = f"{mention}, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {BD[str(msg.from_user.id)]['name']}\n" \
              f"\n" \
              f"–¥–∞—Ç–∞ –≤ –±–æ—Ç–µ: {datetime.now()}\n" \
              f"–±–∞–Ω –¥–æ: {clock} || ({sec} —Å–µ–∫—É–Ω–¥) ||\n" \
              f"\n" \
              f"–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ - /status\n" \
              f"‚ùì–ù–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π !—Ä–µ–ø. –¢–∞–∫ –æ–Ω–æ –¥–æ–π–¥—ë—Ç –¥–æ –Ω–∞—Å!"
    try:
        await bot.send_message(kkk2, txt_ban)
        status = "2"
    except:
        status = "1"
    BAN[kkk2] = {"time":str(clock), "status":status}
    save_Ban()
    await send_ban(msg, status)
    await bot.send_message(group_logs, f"–ë–∞–Ω, {datetime.now()}\n\nAdmin: {msg.from_user.id}\nUser: {kkk2}")

async def chek_ban(msg):
    kkk2 = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
    date_last_farm = datetime.strptime(str(BAN[kkk2]["time"]).split(".")[0], "%Y-%m-%d %H:%M:%S")
    date2 = datetime.strptime(str(msg.date), "%Y-%m-%d %H:%M:%S")
    tm = date2 - date_last_farm
    tm2 = int(tm.total_seconds())
    if tm2 >= 0:
        del BAN[kkk2]
        save_Ban()
        await bot.send_message(msg.chat.id, f"{mention}, –±–∞–Ω –ø—Ä–æ—à—ë–ª! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ, –º—ã –∂–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π, –∞ –≥–ª–∞–≤–Ω–æ–µ —É–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!", reply_to_message_id=msg.message_id)

async def unban(msg):
    kkk2 = str(msg.reply_to_message.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
    if kkk2 not in BAN.keys():
        await bot.send_message(msg.chat.id, f"–Ω–∞ –Ω–µ–≥–æ –Ω–µ –Ω–∞–ª–æ–∂–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    else:
        del BAN[kkk2]
        save_Ban()
        try:
            await bot.send_message(kkk2, f"{mention}, —Å –≤–∞—Å —Å–Ω—è—Ç –±–∞–Ω! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã")
            await bot.send_message(msg.chat.id, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –∏–≥—Ä–æ–∫–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ - tg://openmessage?user_id={kkk2}")
        except:
            await bot.send_message(msg.chat.id, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ –∏–≥—Ä–æ–∫–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ - tg://openmessage?user_id={kkk2}")
        await bot.send_message(group_logs, f"–ë–∞–Ω, {datetime.now()}\n\nAdmin: {msg.from_user.id}\nUser: {kkk2}")

async def Bonus(msg, status):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    cmd = False
    if "bonus" not in BD[kkk].keys():
        BD[kkk]['bonus'] = str(datetime.now().date())
        cmd = True
    elif BD[kkk]['bonus'] != str(datetime.now().date()):
        BD[kkk]['bonus'] = str(datetime.now().date())
        cmd = True

    if cmd:
        rz = random.randint(10000, 15000)
        t1 = ''
        if status == 1:
            rz += int((rz / 100)*10)
            t1 = "+20% [GOLD VIP]"
        elif status == 2:
            rz += int((rz / 100)*20)
            t1 = "+20% [DIMOND VIP]"
        await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –∑–∞–ª—É—Ç–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤—ã–Ω–π –±–æ–Ω—É—Å +{rz}. {t1}")
        BD[kkk]['balance'] += int(rz)
    else:
        await bot.send_message(msg.chat.id, f"{mention}, –≤—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ª—É—Ç–∞–ª–∏ –±–æ—É—Å")
    save()

async def Koder(msg, status):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    cmd = False
    if "kod" not in BD[kkk].keys():
        BD[kkk]['kod'] = str(datetime.now().date())
        cmd = True
    elif BD[kkk]['kod'] != str(datetime.now().date()):
        BD[kkk]['kod'] = str(datetime.now().date())
        cmd = True

    if cmd:
        rz = random.randint(100000, 150000)
        t1 = ''
        if status == 1:
            rz += int((rz / 100)*10)
            t1 = "+20% [GOLD VIP]"
        elif status == 2:
            rz += int((rz / 100)*20)
            t1 = "+20% [DIMOND VIP]"
        await bot.send_message(msg.chat.id, f"{mention}, –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–¥, –∏ –æ–Ω –≤–∞–º –ø—Ä–∏–Ω—ë—Å +{rz}. {t1}")
        BD[kkk]['balance'] += int(rz)
    else:
        await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç—ë—Ä–ª–∏ –≤—Å–µ –ø–∞–ª—å—Ü—ã. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ!")
    save()
async def start_tir(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if "TIR" not in BD[kkk].keys():
        BD[kkk]['TIR'] = str(msg.date)
        cmd = True
    else:
        date_last_farm = datetime.strptime(str(BD[kkk]["TIR"]), "%Y-%m-%d %H:%M:%S")
        date2 = datetime.strptime(str(msg.date), "%Y-%m-%d %H:%M:%S")
        tm = date2 - date_last_farm
        tm2 = int(tm.total_seconds() // 60)
        if tm2 * 60 >= 7200:
            BD[kkk]['TIR'] = str(msg.date)
            cmd = True
            save()
        else:
            await bot.send_message(msg.chat.id, f"{mention}, –ò–≥—Ä–∞—Ç—å –≤ —Ç–∏—Ä –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ")
            cmd = False
    if cmd:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–í–∏–Ω—Ç–æ–≤–∫–∞ #1", callback_data=f"TIR_{kkk}:1"))
        kb.add(InlineKeyboardButton("–í–∏–Ω—Ç–æ–≤–∫–∞ #2", callback_data=f"TIR_{kkk}:2"))
        kb.add(InlineKeyboardButton("–í–∏–Ω—Ç–æ–≤–∫–∞ #3", callback_data=f"TIR_{kkk}:3"))
        await bot.send_message(msg.chat.id, f"{mention}, –¢–∏—Ä! \n\n–í—Å—ë –ø—Ä–æ—Å—Ç–æ, —É —Ç–µ–±—è –Ω–∞ –≤—ã–±–æ—Ä 3 —Ä—É–∂—å—è, —Ç—ã 100% –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –ø—Ä–∏–∑, –Ω–æ —á–µ–º –º–µ—Ç—á–µ —Å—Ç—Ä–µ–ª—è–µ—Ç —Ç–≤–æ—è –≤–∏–Ω—Ç–æ–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–Ω–∞—Å–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ –±–æ–ª—å—à–µ! \n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å –≤–∏–Ω—Ç–æ–≤–∫—É. –£–¥–∞—á–∏!", reply_markup=kb)

async def Mask(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    cmd = False
    if "mask" not in BD[kkk].keys():
        BD[kkk]['mask'] = str(datetime.now().date())
        cmd = True
    elif BD[kkk]['mask'] != str(datetime.now().date()):
        BD[kkk]['mask'] = str(datetime.now().date())
        cmd = True
    else:
        await bot.send_message(msg.chat.id, f"{mention}, –í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–∏—Å–∞–ª–∏ –º–∞—Å–∫—É")

    if cmd:
        if random.randint(1, 100) > 95:
            rz = random.randint(100000, 300000)
            await bot.send_message(msg.chat.id, f"{mention}, –º–∞—Å–∫ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª, –∏ –¥–∞–ª {money_form(str(rz))}")
            BD[kkk]['balance'] += int(rz)
        else:
            await bot.send_message(msg.chat.id, f"{mention}, –ú–∞—Å–∫ –≤–∞—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª :(")
    save()

async def lotery_buy(msg, kol):
    global Lot
    kkk = str(msg.chat.id)
    await registration(kkk)
    kol = money(kol, kkk)
    if kol['type'] == "error":
        await bot.send_message(msg.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    else:
        stom = int(kol['txt']) * 10000
        if stom > BD[kkk]['balance']:
            await bot.send_message(msg.chat.id, f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç")
        else:
            if kkk not in Lot['lot']['usr'].keys():
                Lot['lot']['usr'][kkk] = 0

            Lot['lot']['kol'] += int(kol['txt'])
            Lot['lot']['usr'][kkk] += int(kol['txt'])
            BD[kkk]['balance'] -= stom
            save()
            save_LOT()
            await bot.send_message(msg.chat.id, f"üéü{BD[kkk]['name']}, –≤—ã –∫—É–ø–∏–ª–∏ {kol['txt']} –±–∏–ª–µ—Ç–∏–∫–æ–≤. \nüí∏–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∞: {stom}")
            try:
                await bot.edit_message_text(f"üéü–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üéü\n"
                                            f"\n"
                                            f"üî±–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚ßΩ 50.000.000 (10–º)\n"
                                            f"üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫–∞ ‚ßΩ 10.000 (10–∫)\n"
                                            f"\n"
                                            f"üë§–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤ ‚ßΩ {Lot['lot']['kol']}\n"
                                            f"‚ùì–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç–∏–∫ –º–æ–∂–Ω–æ –≤ –±–æ—Ç–µ ‚ßΩ /lot [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]", chanel_id, Lot['lot']['ID'])
            except:
                pass

async def lotery_start(msg):
    global Lot
    List = []
    for i, y in Lot['lot']['usr'].items():
        for _i in range(int(y)):
            List.append(i)

        if i not in BD.keys():
            await registration(str(i))

    winer = random.choice(List)
    List = []
    Lot['lot']['valid'] = False
    Lot['lot']['usr'] = {}


    BD[winer]['balance'] += 10000000
    save()
    try:
        await bot.send_message(winer, "–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ—é! +10 000 000")
    except:
        pass


    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–õ–æ—Ç–µ—Ä–µ—è –ø—Ä–æ—à–ª–∞!", url="https://t.me/TryChanel_casino"))
    await bot.edit_message_text(f"üéü–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üéü\n"
                                f"\n"
                                f"üî±–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚ßΩ 10.000.000 (10–º)\n"
                                f"üë§–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤: {Lot['lot']['kol']}\n"
                                f"\n"
                                f"üî±–û–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å ID:{winer}! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π ID –≤ –ø—Ä–æ—Ñ–∏–ª–µ ;)", chanel_id, Lot['lot']['ID'])

    Lot['lot']['kol'] = 0
    save_LOT()

async def rassel(msg):
    control = 1
    await bot.send_message(group_logs, f"–†–∞—Å—Å—ã–ª–∫–∞: {datetime.now()}\n\nAdmin: {msg.from_user.id}")
    if msg.reply_to_message:
        col = 0
        col2 = 0
        kol1 = 1
        txt_publ = "–ª–∏—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–≤—à–∏—Ö—Å—è —Ä–∞—Å—Å—ã–ª–æ–∫: \n\n"
        for i in CHAT.keys():
            try:
                await bot.forward_message(i, msg.chat.id, msg.reply_to_message.message_id)
                col += 1
            except:
                txt_publ += f"\n{kol1}. –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {i}"
                col2 += 1
            kol1 += 1

        await bot.send_message(msg.chat.id, f"–£—Å–ø–µ—à–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {col} \n–ø—Ä–æ–≤–∞–ª—ã: {col2}")
    else:
        await bot.send_message(msg.chat.id, "–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def send_ahelp(msg):
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n\n"
                                        f"<b>[1]</b>  +–∞–¥–º–∏–Ω/-–∞–¥–º–∏–Ω <b>‚ßΩ</b> + –∏–ª–∏ - –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                                        f"<b>[2]</b>  !inf [id] <b>‚ßΩ</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ id\n"
                                        f"<b>[3]</b>  .id <b>‚ßΩ</b> –ø–æ–ª—É—á–∏—Ç—å id –∏–≥—Ä–æ–∫–∞\n"
                                        f"<b>[4]</b>  —á–∞—Ç—ã <b>‚ßΩ</b> —Ç–æ–ø 15 —á–∞—Ç–æ–≤\n"
                                        f"<b>[5]</b>  !chat [num] <b>‚ßΩ</b> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ —á–∞—Ç–µ\n"
                                        f"<b>[6]</b>  !donat [id player] [kol] <b>‚ßΩ</b> –≤—ã–¥–∞—á–∞ –¥–æ–Ω–∞—Ç–æ–≤\n"
                                        f"<b>[7]</b>  !publ <b>‚ßΩ</b> —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —á–∞—Ç–∞–º\n"
                                        f"<b>[8]</b>  !slot <b>‚ßΩ</b> –ö–æ–Ω–µ—Ü –ª–æ—Ç–µ—Ä–µ–∏\n"
                                        f"<b>[9]</b>  !lot <b>‚ßΩ</b> –ù–∞—á–∞–ª–æ –ª–æ—Ç–µ—Ä–µ–∏\n"
                                        f"<b>[10]</b>  !–±–∞–Ω [—Å–µ–∫—É–Ω–¥—ã] [–æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ ID] <b>‚ßΩ</b> –±–∞–Ω –Ω–∞ –≤—Ä–µ–º—è\n"
                                        f"<b>[11]</b>  !—Ä–∞–∑–±–∞–Ω [–æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ ID] <b>‚ßΩ</b> –¥–æ—Å—Ä–æ—á–Ω—ã–π —Ä–∞–∑–±–∞–Ω\n"
                                        f"<b>[12]</b> [!work / !unwork] <b>‚ßΩ</b> –í—ã–∫–ª/–í–∫–ª —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
                                        f"<b>[13]</b> /lim - —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n")
async def send_help(msg):
    await asyncio.sleep(1)
    kkk = str(msg.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    txt_help = f"–î–∏–ª–µ—Ä: {mention}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? \n\n" \
           f"  1.üí∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ \n" \
           f"  2.üé∞ –∏–≥—Ä—ã \n" \
           f"  3.üöÄ –ë–∞–∑–æ–≤—ã–µ\n\n" \
           f"‚ùì–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."

    bt_m = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("üí∞–∑–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="job")
    b2 = InlineKeyboardButton("üé∞–∏–≥—Ä—ã", callback_data="happy")
    b3 = InlineKeyboardButton("üöÄ–±–∞–∑–æ–≤—ã–µ", callback_data="main")
    b4 = InlineKeyboardButton("‚ö°Ô∏è–ö–æ–º–∞–Ω–¥—ã(/)", callback_data="cmds")
    bt_m.add(b1, b2)
    bt_m.add(b3)
    bt_m.add(b4)
    await bot.send_sticker(msg.chat.id, sticker="CAACAgIAAxkBAAEFBnxmLMH_B7eyi4f4FpRC88vBLknTHwACSQMAApzW5wqc5uBBhM3jHjQE")
    await bot.send_message(msg.chat.id, txt_help, reply_markup=bt_m)

CHAT_INVITE = []
@dp.message_handler(content_types=['new_chat_members'])
async def new_user_joined(message: types.Message):
    global Chat_id
    try:
        for i in message.new_chat_members:
            if str(message.chat.id) == Chat_id:
                kkk = str(message.from_user.id)
                id_chat = str(message.chat.id)
                kkk2 = str(i['id'])
                mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
                await registration(kkk2)
                await asyncio.sleep(0.2)
                mention2 = "<a href='tg://user?id=" + kkk2 + "'>" + BD[kkk2]['name'] + "</>"
                if kkk2 not in CHAT_INVITE:
                    await bot.send_message(message.chat.id, f"{mention}, –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ {mention2}! +1 000 000 000(MK)")
                    BD[kkk]['balance'] += 1000000000
                    save()
                    CHAT_INVITE.append(kkk2)
                    try:
                        await bot.send_message(group_logs, f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω –≤ —á–∞—Ç –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫. \nID –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ: {kkk2} ({mention2})\nID –ü—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ: {kkk} ({mention})")
                    except:
                        pass
                else:
                    await bot.send_message(message.chat.id, f"{mention}, —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –∑–∞ —Å–µ–∞–Ω—Å ({mention2}) —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏")
    except:
        pass
@dp.message_handler(commands=["Buyvip", "buyvip"])
async def Spirit_Help(msg: types.Message):
    await registration(str(msg.from_user.id))
    await vip_send(msg)

@dp.message_handler(commands=["Spirit", "spirit"])
async def Spirit_Help(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)

    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    txt = f"{mention}, –ß—Ç–æ —Ç–∞–∫–æ–µ Spirit coin? \n\n" \
          f"spirit CoinüåÄ - —ç—Ç–æ –¥–æ–Ω–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ(–ü–æ–¥—Ä–æ–±–Ω–µ–µ: –î–æ–Ω–∞—Ç), –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–∞–∑–¥–∞—á–µ:) \n" \
          f"\n" \
          f"–ü–æ–∫—É–ø–∞—è –µ—ë –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∏ –≤ –∑–∞–º–µ–Ω –º—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–∞–º –≤–æ—Å–ø–æ–ª–æ–≤–∞—Ç—å—Å—è –±—É—Å—Ç–∞–º–∏! –ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–æ–Ω–∞—Ç–æ–≤: –î–æ–Ω–∞—Ç \n"

    await bot.send_message(msg.chat.id, txt)

@dp.message_handler(commands=["moneybox", "Moneybox"])
async def money_box_help(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)

    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    txt = f"{mention}, –±—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å –ø–æ –∫–æ–ø–∏–ª–∫–µ:" \
          f"–ö–æ–ø–∏–ª–∫–∞ —ç—Ç–æ —Å–ø–æ—Å–æ–± —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞. –ü–æ–ª–æ–∂–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –∏ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤. –ò –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç! \n" \
          f"\n" \
          f"1. –ö–æ–ø–∏–ª–∫–∞ [–ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å] [—Å—É–º–º–∞] - –ø–æ–ª–æ–∂–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –≤ –æ–±—ã—á–Ω—ã–π –±–∞–Ω–∫\n" \
          f"\n" \
          f"2. –î–µ–ø–æ–∑–∏—Ç [–ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å] [—Å—É–º–º–∞] - –ü–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—é–∂–∫—É –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞\n" \
          f"\n" \
          f"!–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º —Å—á—ë—Ç–æ–º - —Ç–∞–π–º–µ—Ä –æ–±–Ω—É–ª—è–µ—Ç—Å—è!\n"

    await bot.send_message(msg.chat.id, txt)
@dp.message_handler(commands=["donat", "Donat"])
async def donat_send(msg: types.Message):
    await send_donat_list(msg)

@dp.message_handler(commands=["pillow", "Pillow"])
async def donat_send(msg: types.Message):
    await bot.send_message(msg.chat.id, "üõè–ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏ - –ï—Å–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–∏—Ç –º–µ–Ω–µ–µ 25–∫, –ø–∞–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –≤–∞–º –ø–æ–ª–Ω–æ–≥–æ –∫—Ä–∞—Ö–∞ –∏ –≤–µ—Ä–Ω—ë—Ç 75–∫")

@dp.message_handler(commands=["Ref", "ref"])
async def donat_send(msg: types.Message):
    await send_ref(msg)

def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else None

@dp.message_handler(commands=["status", "Status"])
async def start_command(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)
    if kkk in BAN.keys():
        await chek_ban(msg)

    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if kkk not in BAN.keys():
        await bot.send_message(msg.chat.id, f"{mention}, –Ω–∞ –≤–∞—Å –Ω–µ –Ω–∞–ª–æ–∂–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! \n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' - –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    else:

        date_last_farm = datetime.strptime(str(BAN[kkk]["time"]).split(".")[0], "%Y-%m-%d %H:%M:%S")
        date2 = datetime.strptime(str(msg.date), "%Y-%m-%d %H:%M:%S")
        tm = date_last_farm - date2
        tm2 = int(tm.total_seconds())
        await bot.send_message(msg.chat.id, f"{mention}, –Ω–∞ –≤–∞—Å –Ω–∞–ª–æ–∂–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!\n"
                                            f"\n"
                                            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –ë–∞–Ω\n"
                                            f"–ü—Ä–æ–¥–ª–∏—Ç—Å—è –¥–æ: {str(BAN[kkk]['time']).split('.')[0]}\n"
                                            f"–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {tm2} —Å–µ–∫")

@dp.message_handler(commands=["promokod", "Promokod"], state="*")
async def start_command(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)
    await asyncio.sleep(1)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    txt_promo = f"{mention}, –ü—Ä–æ–º–æ–∫–æ–¥—ã! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ\n" \
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: 500üåÄ\n\n" \
                f"<b>[1]</b> –ü—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ [–∏–º—è] [–∫–æ–ª. –∞–∫—Ç–∏–≤–∞—Ü–∏–π] [–ø—Ä–∏–∑]\n" \
                f"\n" \
                f"<b>[2]</b> –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º –≤–≤–µ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–µ–∂–¥–µ —á–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥. (–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)\n" \
                f"\n" \
                f"<b>[3]</b> –î–æ–±–∞–≤—Ç–µ –º–µ–Ω—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç –∏ –≤—Å—ë, –ø—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤! \n" \
                f"\n" \
                f"‚ùì–ó–∞—á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? -–¢–æ–ª—å–∫–æ —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞! –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n" \
                f"\n" \
                f"‚ùì–ö–∞–∫ —É–∑–Ω–∞—Ç—å id –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞? -–≤ —á–∞—Ç–µ: /chat_id || –≤ –∫–∞–Ω–∞–ª–µ: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ username –∏ –≤—Å—Ç–∞–≤—Ç–µ –≤ –±–æ—Ç–∞(@username_to_id_bot)"
    await bot.send_message(msg.chat.id, txt_promo)

@dp.message_handler(commands=["start", "Start"], state="*")
async def start_command(msg: types.Message):
    await users_in_chat(str(msg.chat.id), msg)
    await chek_user_in_chat(str(msg.chat.id), msg.from_user.id, msg)
    kkk = str(msg.from_user.id)
    unique_code = str(extract_unique_code(msg.text))
    await registration(kkk)
    CMD = False
    work = False
    if unique_code in BD.keys():
        CMD = True
    if str(unique_code).split("_")[0] == "w":
        work = True
    b_start = InlineKeyboardMarkup()
    b_start.add(InlineKeyboardButton("üí¨–ß–∞—Ç", url=chat_link))
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    txt = f"{mention}, –ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è –≤ –ö–∞–∑–∏–Ω–æ –±–æ—Ç! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å: \n" \
          f"\n" \
          f"üî•–ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã–π –∏–≥—Ä—ã! /games\n" \
          f"üîù–ë–æ—Ä–æ—Ç—å—Å—è –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ \n" \
          f"üí¨–û–±—â–∞—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n" \
          f"‚è∞–£–±–∏—Ç—å –≤—Ä–µ–º—è :)\n" \
          f"\n" \
          f"üòé–ò –≤—ã —ç—Ç–æ–º –º—ã —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º! \n" \
          f"/games - —É–∑–Ω–∞–π –æ –∏–≥—Ä–∞—Ö –≤ –±–æ—Ç–µ.\n" \
          f"/help - –ø–æ–ª—É—á–∏ –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞ –∏ –¥—Ä.\n" \
          f"/contact - –ö–∞–Ω–∞–ª, —á–∞—Ç.\n" \
          f"\n" \
          f"‚ù§Ô∏è–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    await bot.send_message(msg.chat.id, txt, reply_markup=b_start)
    if work:
        idd = 0
        for i, y in WORK.items():
            if y['lnk'] == unique_code:
                idd = i
                break
        if idd != 0 and "users" not in WORK[idd].keys():
            WORK[idd]['users'] = []
        if idd != 0:
            try:
                if kkk not in WORK[idd]['users']:
                    WORK[idd]['users'].append(kkk)
                    if kkk in BD.keys():
                        BD[idd]['balance'] += 150000
                        await bot.send_message(idd, f"–ü–ê–†–¢–ù–Å–† –°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ò–õ–ê –ü–†–ò–°–û–ï–î–ï–ù–ò–í–®–ï–ì–û–°–Ø –£–ß–ê–°–¢–ù–ò–ö–ê –ö –ü–†–û–ï–ö–¢–£!\n\n–û–Ω —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. "
                                                    f"\n\n–ù–æ –º—ã –≤—ã–¥–∞–¥–∏–º –≤–∞–º 150–∫!\n"
                                                    f"–ò–≥—Ä–æ–∫ - {mention}")
                    else:
                        BD[idd]['balance'] += 100000
                        WORK[idd]['kol'] += 1
                        await bot.send_message(idd, f"–ü–ê–†–¢–ù–Å–† –°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ò–õ–ê –ü–†–ò–°–û–ï–î–ï–ù–ò–í–®–ï–ì–û–°–Ø –£–ß–ê–°–¢–ù–ò–ö–ê –ö –ü–†–û–ï–ö–¢–£!\n\n–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –ø—Ä–æ–∫—Ç–µ! –ü—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –µ–≥–æ –∫ –ø—Ä–æ–µ–∫—Ç—É –µ—â—ë —Å–∏–ª—å–Ω–µ–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ! "
                                                    f"\n\n–ü–µ—Ä–≤–∞—è –∏–∑ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —ç—Ç–æ 100–∫\n"
                                                    f"–ò–≥—Ä–æ–∫ - {mention}")

            except:
                pass
            save()
            save_WORK()
    if CMD:
        if unique_code not in REF.keys():
            REF[unique_code] = {
                "usr": []
            }
        if kkk == unique_code:
            await bot.send_message(msg.chat.id, f"{mention}, –ù–µ —Ö–∏—Ç—Ä–∏ :)")
        elif kkk in REF[unique_code]['usr']:
            await bot.send_message(msg.chat.id, f"{mention}, –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—è–ª–∏—Å—å –ø–æ —ç—Ç–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
        else:
            REF[unique_code]['usr'].append(kkk)
            await registration(unique_code)
            if len(REF[unique_code]['usr']) == 5:
                p = 250000
                try:
                    await bot.send_message(unique_code, f'{mention}, –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å <b>5 –ß–ï–õ–û–í–ï–ö</b>\n'
                                                        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–ø–µ—Ä –Ω–∞–≥—Ä–∞–¥—É: {p}')
                except:
                    pass
                BD[unique_code]['balance'] += p
            elif len(REF[unique_code]['usr']) == 10:
                p = 300000
                try:
                    await bot.send_message(unique_code, f'{mention}, –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å <b>5 –ß–ï–õ–û–í–ï–ö</b>\n'
                                                        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–ø–µ—Ä –Ω–∞–≥—Ä–∞–¥—É: {p}')
                except:
                    pass
                BD[unique_code]['balance'] += p
            elif len(REF[unique_code]['usr']) == 15:
                p = 1000000
                try:
                    await bot.send_message(unique_code, f'{mention}, –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å <b>5 –ß–ï–õ–û–í–ï–ö</b>\n'
                                                        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–ø–µ—Ä –Ω–∞–≥—Ä–∞–¥—É: {p}')
                except:
                    pass
                BD[unique_code]['balance'] += p
            elif len(REF[unique_code]['usr']) == 20:
                p = 1000000
                try:
                    await bot.send_message(unique_code, f'{mention}, –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å <b>5 –ß–ï–õ–û–í–ï–ö</b>\n'
                                                        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–ø–µ—Ä –Ω–∞–≥—Ä–∞–¥—É: {p}')
                except:
                    pass
                BD[unique_code]['balance'] += p
            else:
                p = 100000
                try:
                    await bot.send_message(unique_code, f'{mention}, –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å\n'
                                                        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏: 100 000')
                except:
                    pass
                BD[unique_code]['balance'] += p


            BD[kkk]['balance'] += 100000
            await bot.send_message(msg.chat.id, f'{mention}, –í—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n'
                                                f'–í—ã –ø–æ–ª—É—á–∏–ª–∏: 100 000')
            await send_ref(msg)
            await bot.send_message(group_logs, f"–ü–æ —Ä–µ—Ñ—É +1\n\nOwner Link: {unique_code}\nComes: {kkk}")
            save()
            save_REF()

@dp.message_handler(commands=["contact", "Contact"])
async def money_box_help(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    b_game = InlineKeyboardMarkup()
    b_game.add(InlineKeyboardButton("üí¨–ß–∞—Ç", url=chat_link))
    b_game.add(InlineKeyboardButton("–ö–∞–Ω–∞–ª", url=chanel_link))
    txt = f"{mention}, –ù–∞ –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –µ—Å—Ç—å:\n1) —á–∞—Ç\n2)–ö–∞–Ω–∞–ª"
    await bot.send_message(msg.chat.id, txt, reply_markup=b_game)

@dp.message_handler(commands=["games", "Games"])
async def money_box_help(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    b_game = InlineKeyboardMarkup()
    b_game.add(InlineKeyboardButton("–†—É–ª–µ—Ç–∫–∞", url="https://t.me/TryChat_casino/4"))
    b_game.add(InlineKeyboardButton("–õ–µ—Å–µ–Ω–∫–∞", url="https://t.me/TryChat_casino/6"))

    txt = f"{mention}, –º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –∏–≥—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç–æ–º: \n" \
          f"\n" \
          f"üî•–†—É–ª–µ—Ç–∫–∞: –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ(—ç—Ç–æ —Å—Ç–∞–≤–∫–∞), –∞ –¥–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ\n" \
          f"   1. –ß, –∫ - –∏–ª–∏(–ß–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π). –ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 2\n" \
          f"   2, 0,1,2..12 - –í–≤–µ–¥–∏ —á–∏—Å–ª–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å, –∏—Ö –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –≤—ã–∏–≥—Ä—ã—à —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 2.\n" \
          f"\n" \
          f"üî•–õ–µ—Å–µ–Ω–∫–∞. –î–æ–≤–æ–ª—å–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–≥—Ä–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ –õ–µ—Å–µ–Ω–∞ (—Å—Ç–∞–≤–∫–∞).\n" \
          f"   –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–∞–≤–∏–∫–∏. –ì–ª–∞–≤–Ω–æ–µ –≤–æ–≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –∞ —Ç–æ –ø—Ä–∏–ø–¥—é—â–µ—Ç!\n" \
          f"\n" \
          f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–∞—Ö –∏–≥—Ä–∞—Ö:\n\n"

    await bot.send_message(msg.chat.id, txt, reply_markup=b_game)

@dp.message_handler(commands=["games", "Games"])
async def money_box_help(msg: types.Message):
    kkk = str(msg.from_user.id)
    await registration(kkk)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"

    b_game = InlineKeyboardMarkup()
    b_game.add(InlineKeyboardButton("–†—É–ª–µ—Ç–∫–∞", url="https://t.me/TryChat_casino/4"))
    b_game.add(InlineKeyboardButton("–õ–µ—Å–µ–Ω–∫–∞", url="https://t.me/TryChat_casino/6"))

    txt = f"{mention}, –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: \n\n" \
          f"" \
          f""

    await bot.send_message(msg.chat.id, txt, reply_markup=b_game)

users_in_mini_ban = ["1299946843"]
work = True
@dp.message_handler()
async def sistema(msg: types.Message):
    global ruletka_in, BD, CHAT, chat_ruletka, users_in_mini_ban, work
    kkk = str(msg.from_user.id)
    await registration(kkk)
    await chek_vip(msg)
    await users_in_chat(str(msg.chat.id), msg)
    await chek_user_in_chat(str(msg.chat.id), msg.from_user.id, msg)
    await chat_registration(str(msg.chat.id), msg)
    if kkk not in BAN.keys():
        ban_contoll = True
    else:
        if BAN[kkk]['status'] == "1":
            await bot.send_message(msg.chat.id, reply_to_message_id=msg.message_id, text=f"ID{kkk}, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. \n\n"
                                                                                         f"–î–∞—Ç–∞ –≤ –±–æ—Ç–µ: {datetime.now()}\n"
                                                                                         f"–±–∞–Ω –¥–æ: {BAN[kkk]['time']}\n\n"
                                                                                         f"Ps. –ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å –±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ.\n\n"
                                                                                         f"‚ùì–ù–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π !—Ä–µ–ø. –¢–∞–∫ –æ–Ω–æ –¥–æ–π–¥—ë—Ç –¥–æ –Ω–∞—Å!")
            BAN[kkk]['status'] = "2"
        ban_contoll = False

    if msg.chat.id == "-1002042398001" and kkk in WORK.keys():
        WORK[kkk]['mag'] += 1
        if WORK[kkk]['dt'] != str(datetime.now().day):
            WORK[kkk]['msg'] = 1
            WORK[kkk]['dt'] = str(datetime.now().day)
        save_WORK()

    if work and kkk not in users_in_mini_ban and ban_contoll or kkk == str(GLAVA) or BD[kkk]['admin']:
        status_vip = 0
        await chek_promo(msg)
        if kkk in DONAT.keys() and 'vip' in DONAT[kkk].keys():
            if DONAT[kkk]['vip']['act'] == True:
                status_vip = DONAT[kkk]['vip']['vp']
        if status_vip == 1:
            await ewery_day_gold(msg)
        elif status_vip == 2:
            await ewery_day_dimond(msg)
            await pillow(msg)

        chat_ruletka_fun(str(msg.chat.id))
        person_limit(kkk)
        timer(str(msg.chat.id), kkk, msg)

        BD[kkk]['balance'] = int(BD[kkk]['balance'])
        save()

        mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
        L1 = msg.text.split(" ")

        COMMAND = False
        try:
            L_kontrol = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "/", "*", "+", "-", "(", ")"," ", "", "0"]
            ctr = 0
            for i in msg.text:
                if i not in L_kontrol:
                    ctr = 1
                    break
            if ctr == 1:
                pass
            elif ctr == 0:
                await bot.send_message(msg.chat.id, f"{mention}, –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –ø—Ä–∏–º–µ—Ä: \n{msg.text} = {eval(msg.text)}")
                COMMAND = True
        except:
            pass
        if msg.chat.id == -1002072084420 and msg.from_user.id == 777000:
            await bot.unpin_chat_message(msg.chat.id, msg.message_id)
            await bot.send_message(msg.chat.id, f"üìå–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ \n\nüöÄ–ü—Ä–∏—Å–æ–µ–¥–µ–Ω—è–π—Å—è –∫ –Ω–∞–º –≤ —á–∞—Ç, —Ç—É—Ç —á–∞—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–∞–∑–¥–∞—á–∏, —Å–ª–∏–≤—ã –∏ —Ç–¥...", reply_to_message_id=msg.message_id)

        stavka = money(L1[0], kkk)
        if stavka['type'] == "ok":
            await play_rulet(str(msg.chat.id), msg.text, kkk, stavka)
            COMMAND = True
        if msg.text in ["–î–æ–Ω–∞—Ç", "–¥–æ–Ω–∞—Ç"]:
            await send_donat_list(msg)
            COMMAND = True
        if msg.text in ["–°—Ç–∞–≤–∫–∏", "—Å—Ç–∞–≤–∫–∏"]:
            await stavki(str(msg.chat.id), kkk)
        if msg.text in ["vip", "Vip", "/myvip", "/Myvip"]:
            await vip_watch(msg)
        if msg.text in ["–±", "–ë", "–±–∞–ª–∞–Ω—Å", "–ë–∞–ª–∞–Ω—Å"]:
            mn = ""
            if kkk in DONAT.keys():
                mn = f"   ‚åàüåÄSpirit ‚ßΩ {DONAT[kkk]['donat']}‚åã\n"
            await bot.send_message(msg.chat.id, f"{mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å:\n\n   ‚åàü™ô–º–æ–Ω–µ—Ç ‚ßΩ {BD[kkk]['balance']}‚åã\n{mn}\n‚ùì–ß—Ç–æ —Ç–∞–∫–æ–µ Spirit coin - /Spirit")
            COMMAND = True
        if msg.text in ["–±–±", "–ë–±", "–ë–ë"]:
            await bot.send_message(msg.chat.id, "–°–∫—Ä—ã—Ç—ã–π –±–∞–ª–∞–Ω—Å", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ—Å–º–∞—Ç—Ä–µ—Ç—å", callback_data="BB")))
        if msg.text in ["Go","go", "–ì–æ", "–≥–æ"]:
            if str(msg.chat.id) not in ruletka_in.keys() or ruletka_in[str(msg.chat.id)] == False:
                ruletka_in[str(msg.chat.id)] = True
                await start_rulet(str(msg.chat.id))
                COMMAND = True
        if msg.text in ["–õ–æ–≥", "–ª–æ–≥"]:
            await log_fun(str(msg.chat.id), kkk)
            COMMAND = True
        if L1[0] in ["BlackJack", "Blackjack", "blackJack", "blackjack"] and len(L1) >= 2:
            await start_blackJ(msg, L1[1])
        if msg.text in ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"]:
            await povtor_stavka(str(msg.chat.id), kkk)
            COMMAND = True
        if msg.text[0] == "+" and msg.reply_to_message:
            await perevod(str(msg.chat.id), kkk, str(msg.reply_to_message.from_user.id), str(msg.text[1::]))
            COMMAND = True
        if msg.text in ["–ø—Ä–æ—Ñ","–ü—Ä–æ—Ñ", "!–ü—Ä–æ—Ñ", "!–ø—Ä–æ—Ñ", "–ü—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—å"]:
            await prof_fun(str(msg.chat.id), kkk)
            COMMAND = True
        if msg.text in ["–£–∑–Ω–∞—Ç—å –Ω–∏–∫", "—É–∑–Ω–∞—Ç—å –Ω–∏–∫"]:
            await bot.send_message(msg.chat.id, f"{mention}, –≤–∞—à –Ω–∏–∫: {BD[kkk]['name']}")
            COMMAND = True
        if L1[0] in ["–ª–µ—Å–µ–Ω–∫–∞", "–õ–µ—Å–µ–Ω–∫–∞"] and len(L1) == 2:
            await Lecenka(str(msg.chat.id), kkk, L1[1])
            COMMAND = True
        if msg.text in ["—Ç–æ–ø", "–¢–æ–ø"]:
            await Top_List(str(msg.chat.id), kkk, msg)
            COMMAND = True
        if msg.text in ["—á–∞—Ç", "–ß–∞—Ç"]:
            await chat_send(msg)
        if msg.text in ["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "/help", "/Help", "/help@GMCasioBot", "/Help@GMCasioBot"]:
            await send_help(msg)
            COMMAND = True
        if msg.text in ["!–ë–æ–Ω—É—Å", "!–±–æ–Ω—É—Å"]:
            await Bonus(msg, status_vip)
            COMMAND = True
        if msg.text in ["–ù–∞–ø–∏—Å–∞—Ç—å –ú–∞—Å–∫—É", "–ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å–∫—É", "–Ω–∞–ø–∏—Å–∞—Ç—å –ú–∞—Å–∫—É", "–Ω–∞–ø–∏—Å–∞—Ç—å –º–∞—Å–∫—É"]:
            await Mask(msg)
            COMMAND = True
        if msg.text in ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "–ü—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞—Ç—å", "–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞—Ç—å"]:
            await Koder(msg, status_vip)
            COMMAND = True
        if msg.text in ["–¢–∏—Ä", "—Ç–∏—Ä"]:
            await start_tir(msg)
            COMMAND = True
        if L1[0] in ["–ì–æ–ª", "–≥–æ–ª"] and len(L1) == 2:
            await Gol_fun(L1[1], msg)
            COMMAND = True
        if L1[0] in ["–ë–∞—Å", "–±–∞—Å"] and len(L1) == 2:
            await Bal_fun(L1[1], msg)
            COMMAND = True
        if L1[0] in ["–ë–æ—É–ª", "–±–æ—É–ª"] and len(L1) == 2:
            await Boul_fun(L1[1], msg)
            COMMAND = True
        if L1[0] in ["–î–∞—Ä—Ç—Å", "–¥–∞—Ä—Ç—Å"] and len(L1) == 2:
            await Darts_fun(L1[1], msg)
            COMMAND = True
        if L1[0] in ["–°–ø–∏–Ω", "—Å–ø–∏–Ω"] and len(L1) == 2:
            await Spin_fun(L1[1], msg)
            COMMAND = True
        if msg.text in ["!–†–µ–ø", "!—Ä–µ–ø"] and msg.reply_to_message:
            await bot.send_message(msg.chat.id, f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏èÔ∏è\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {mention}, ID: {kkk}", reply_to_message_id=msg.reply_to_message.message_id)
            await bot.forward_message(GLAVA, msg.chat.id, msg.reply_to_message.message_id)
            await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É.", reply_to_message_id=msg.reply_to_message.message_id)
            COMMAND = True
        if L1[0] in ["–ü—Ä–æ–º–æ", "–ø—Ä–æ–º–æ", "–ü—Ä–æ–º–æ–∫–æ–¥", "–ø—Ä–æ–º–æ–∫–æ–¥"] and len(L1) == 2:
            await Promo(msg, L1[1])
            COMMAND = True
        if msg.text in ["!–ì–æ–Ω–∫–∞", "!–≥–æ–Ω–∫–∞"]:
            await start_drivars(msg)
            COMMAND = True
        if L1[0] in ["–º1", "–ú1", "–º2", "–ú2", "–ú3", "–º3", "–ú4", "–º4", "–ú5", "–º5"] and len(L1) == 2:
            await drive_make_stavka(msg, L1)
            COMMAND = True
        if L1[0] in ["!–î–µ–ø–æ–∑–∏—Ç", "!–¥–µ–ø–æ–∑–∏—Ç"]:
            if len(L1) < 2:
                await bot.send_message(msg.chat.id, f"{mention}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –ø–æ—Å–º–∞—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –≤ –¥–æ–Ω–∞—Ç –º–∞–≥–∞–∑–∏–Ω–µ\n\n–ö–æ–º–∞–Ω–¥–∞: –¥–æ–Ω–∞—Ç")
            elif len(L1) >= 2:
                await DepDonat(msg, L1[1])
            COMMAND = True
        if L1[0] in ["–û–±–º–µ–Ω—è—Ç—å", "–æ–±–º–µ–Ω—è—Ç—å"]:
            if len(L1) < 2:
                await bot.send_message(msg.chat.id, f"{mention}, –í–≤–µ–¥–∏—Ç–µ –∫–æ–∏—á–µ—Å—Ç–≤–æ spirit coinüåÄ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å.\n\n P.s –í –±–æ—Ç–µ –≤—Å—Ç—Ä–µ–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä")
            elif len(L1) >= 2:
                await ObmDonat(msg, L1[1])
            COMMAND = True
        if msg.text in ["–ø–∞—Ä—Ç–Ω—ë—Ä", "–ü–∞—Ä—Ç–Ω—ë—Ä"]:
            await send_part(msg)
        if len(L1) >= 3:
            if L1[0] in ["–°–º–µ–Ω–∏—Ç—å", "—Å–º–µ–Ω–∏—Ç—å"]:
                if L1[1] in ["–Ω–∏–∫", "–ù–∏–∫", "–ò–º—è", "–∏–º—è"]:
                    name = ""
                    for i in L1[2::]:
                        name += i
                        name += " "

                    if len(name) > 18:
                        await bot.send_message(msg.chat.id, f"{mention}, –≤–∞—à–µ –∏–º—è —Å–∏–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ. –£–º–µ–Ω—å—à–∏—Ç–µ –µ–≥–æ –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–º")
                    else:
                        BD[kkk]['name'] = name
                        save()
                        await bot.send_message(msg.chat.id, f"{mention}, –≤—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∞–∫ –Ω–∞ {name}")
                    COMMAND = True
        if L1[0] in ["/lot", "/Lot"] and len(L1) >= 2:
            await lotery_buy(msg, str(L1[1]))
        if msg.text in ["–ú–æ—è –∫–æ–ø–∏–ª–∫–∞", "–º–æ—è –ö–æ–ø–∏–ª–∫–∞", "–º–æ—è –∫–æ–ø–∏–ª–∫–∞", "–ú–æ—è –ö–æ–ø–∏–ª–∫–∞"]:
            if kkk not in BANK.keys():
                BANK[kkk] = {
                    "bank": 0,
                    "deposit": 0,
                    "chek_deposit": 0,
                    "time": str(msg.date),
                    "procent": 1,
                }
                save_BANK()
            await bank_deposit_time(kkk, str(msg.date), status_vip)
            await asyncio.sleep(1)
            txt = f"{mention}, –≤–∞—à–∞ –∫–æ–ø–∏–ª–∫–∞: \n" \
                  f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {BANK[kkk]['bank']} \n" \
                  f"–ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç: {BANK[kkk]['deposit']}\n" \
                  f"–ø—Ä–æ—Ü–µ–Ω—Ç: {BANK[kkk]['procent']}%\n" \
                  f"\n" \
                  f"–ø–æ–º–æ—â—å –ø–æ –∫–æ–ø–∏–ª–∫–µ - /moneybox"

            await bot.send_message(msg.chat.id, txt)
            COMMAND = True
        if L1[0] in ["–°–æ–∑–¥–∞—Ç—å", "—Å–æ–∑–¥–∞—Ç—å"] and len(L1) >= 5 and L1[1] in ["–ø—Ä–æ–º–æ", "–ü—Ä–æ–º–æ"]:
            await make_promo(msg, L1[2], L1[3], L1[4])
            COMMAND = True
        if L1[0] in ["–ö–æ–ø–∏–ª–∫–∞", "–∫–æ–ø–∏–ª–∫–∞"] and len(L1) == 3:
            kol = L1[2]
            if kkk not in BANK.keys():
                BANK[kkk] = {
                    "bank": 0,
                    "deposit": 0,
                    "chek_deposit": 0,
                    "time": str(msg.date),
                    "procent": 1,
                }
                save_BANK()
            if L1[1] in ["–ø–æ–ª–æ–∂–∏—Ç—å","–ü–æ–ª–æ–∂–∏—Ç—å"]:
                await bank_take(str(msg.chat.id), kkk, kol, str(msg.date))
            elif L1[1] in ["—Å–Ω—è—Ç—å", "–°–Ω—è—Ç—å", "–≤–∑—è—Ç—å", "–í–∑—è—Ç—å"]:
                await bank_give(str(msg.chat.id), kkk, kol, str(msg.date))
            COMMAND = True
        if msg.text in ["–†–µ—Ñ", "—Ä–µ—Ñ", "–†–µ—Ñ–µ—Ä–∞–ª", "—Ä–µ—Ñ–µ—Ä–∞–ª"]:
            await send_ref(msg)
        if L1[0] in ["–î–µ–ø–æ–∑–∏—Ç", "–¥–µ–ø–æ–∑–∏—Ç"] and len(L1) == 3:
            kol = L1[2]
            if kkk not in BANK.keys():
                BANK[kkk] = {
                    "bank": 0,
                    "deposit": 0,
                    "chek_deposit": 0,
                    "time": str(msg.date),
                    "procent": 1,
                }
                save_BANK()
            if L1[1] in ["–ø–æ–ª–æ–∂–∏—Ç—å","–ü–æ–ª–æ–∂–∏—Ç—å"]:
                await deposit_take(str(msg.chat.id), kkk, kol, str(msg.date), status_vip)
            elif L1[1] in ["—Å–Ω—è—Ç—å", "–°–Ω—è—Ç—å", "–≤–∑—è—Ç—å", "–í–∑—è—Ç—å"]:
                await deposit_give(str(msg.chat.id), kkk, kol, str(msg.date), status_vip)
            COMMAND = True
        if COMMAND:
            CHAT[str(msg.chat.id)]['cmd'] += 1
            save_CHAT()

        if BD[kkk]['admin'] or kkk == GLAVA:
            if msg.text in ["+–ê–¥–º–∏–Ω","+–∞–¥–º–∏–Ω"] and msg.reply_to_message:
                BD[str(msg.reply_to_message.from_user.id)]['admin'] = True
                save()
                await bot.send_message(msg.chat.id, f"{mention}, –≤—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ ID:{msg.reply_to_message.from_user.id}")
            if msg.text in ["-–ê–¥–º–∏–Ω","-–∞–¥–º–∏–Ω"] and msg.reply_to_message:
                if str(msg.reply_to_message.from_user.id) != GLAVA:
                    BD[str(msg.reply_to_message.from_user.id)]['admin'] = False
                    save()
                    await bot.send_message(msg.chat.id, f"{mention}, –≤—ã —Å–Ω—è–ª–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ ID:{msg.reply_to_message.from_user.id}")
            if L1[0] in ["/par", "/Par", "/partner", "/Partner"] and len(L1) == 2:
                link_user = "w_" + str(int(L1[1]) // 2) + "ork"
                for _i, _y in WORK.items():
                    if _y['lnk'] == link_user:
                        link_user = "w_" + str(L1[1]) + "ork"
                        break
                WORK[str(L1[1])] = {"lnk": link_user, "kol": 0, "dt": "0", "msg": 0}
                save_WORK()
            if L1[0] in ["!inf", "!Inf"] and len(L1) == 2:
                idd = L1[1]
                await show_prof(str(msg.chat.id), idd)
            if msg.text in [".ID", ".id", ".Id", ".iD"] and msg.reply_to_message:
                await bot.send_message(msg.chat.id, f"Id: {msg.reply_to_message.from_user.id}")
            if msg.text in ["—á–∞—Ç—ã", "–ß–∞—Ç—ã"]:
                await All_chats(str(msg.chat.id))
            if L1[0] in ["!chat", "!Chat"] and len(L1) == 2:
                idd = str(L1[1])
                await chat_inf(str(msg.chat.id), idd)
            if L1[0] in ["!donat", "!Donat"] and len(L1) == 3:
                idd = L1[1]
                kol = L1[2]
                await donat_buy(str(msg.chat.id), kol, idd, BD[kkk]['name'])
            if L1[0] == "!publ" and BD[kkk]['admin'] == True:
                await rassel(msg)
            if msg.text in ["!slot", "!Slot", "//slot", "//Slot"]:
                await lotery_start(msg)
            if L1[0] in ["!–ë–∞–Ω", "!–±–∞–Ω"] and len(L1) == 2 and msg.reply_to_message:
                print("1")
                await give_ban(msg, L1)
            if L1[0] in ["!–ë–∞–Ω", "!–±–∞–Ω"] and len(L1) == 3 and str(msg.reply_to_message) == 'None':
                await give_ban_id(msg, L1)
            if L1[0] in ["!–†–∞–∑–±–∞–Ω", "!—Ä–∞–∑–±–∞–Ω"] and len(L1) == 1 and msg.reply_to_message:
                await unban(msg)
            if L1[0] in ["!–†–∞–∑–±–∞–Ω", "!—Ä–∞–∑–±–∞–Ω"] and len(L1) == 2 and str(msg.reply_to_message) == 'None':
                await unban_id(msg, L1)
            if msg.text in ["/lim", "/Lim"] and msg.reply_to_message:
                await limit_off(msg)
            if msg.text in ["!work", "!Work"] and work==False:
                work = True
                await bot.send_message(msg.chat.id, f"{mention}, –±–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            if msg.text in ["!unwork", "!Unwork"] and work:
                work = False
                await bot.send_message(msg.chat.id, f"{mention}, –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤")
            if msg.text in ["!lot", "!Lot", "//Lot", "//lot"]:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å ü§ë", callback_data="LotBuy"))
                soo = await bot.send_message(chanel_id, f"üéü–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üéü\n"
                                                  f"\n"
                                                  f"üî±–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚ßΩ 10.000.000 (10–º)\n"
                                                  f"üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫–∞ ‚ßΩ 10.000 (10–∫)\n"
                                                  f"\n"
                                                  f"üë§–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤: 0\n"
                                                  f"‚ùì–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç–∏–∫ –≤ –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /lot [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]", reply_markup=kb)

                Lot['lot'] = {"kol": 0, "ID": str(soo.message_id), "valid":True, "usr":{}}
                save_LOT()
            if msg.text in ["!ahelp", "!Ahelp", "/Ahelp", "/ahelp"]:
                await send_ahelp(msg)
    elif kkk in users_in_mini_ban and msg.chat.type == "private":
        await bot.send_message(msg.chat.id, f"–ê –Ω—É –º–æ–ª—á–∞—Ç—å")
    elif ban_contoll == False:
        await chek_ban(msg)
    elif work == False:
        if msg.chat.type == "private":
            await bot.send_message(msg.chat.id, f"–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç! –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ :(")

@dp.callback_query_handler(lambda call: call.data.startswith('BB'))
async def bonusik(call: types.CallbackQuery):
    kkk = str(call.from_user.id)
    mn = ""
    if kkk in DONAT.keys():
        mn = f"   ‚åàüåÄSpirit ‚ßΩ {DONAT[kkk]['donat']}‚åã\n"
    await bot.answer_callback_query(callback_query_id=call.id, text=f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n\n   ‚åàü™ô–º–æ–Ω–µ—Ç ‚ßΩ {BD[kkk]['balance']}‚åã\n{mn}\n‚ùì–ß—Ç–æ —Ç–∞–∫–æ–µ Spirit coin - /Spirit", show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith('LotBuy'))
async def bonusik(call: types.CallbackQuery):
    kkk = str(call.from_user.id)
    await registration(kkk)
    if BD[kkk]['balance'] < 10000:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n\n   ‚åàü™ô–º–æ–Ω–µ—Ç ‚ßΩ {BD[kkk]['balance']}‚åã \n‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–∏–∫–æ–≤ - {Lot['lot']['usr'][kkk]}\n‚ùóÔ∏è–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç! {int(10000) - int(BD[kkk]['balance'])}", show_alert=True)
    else:
        user_channel_status = await bot.get_chat_member(chat_id=f'{chanel_id}', user_id=kkk)
        if user_channel_status["status"] != 'left':
            if kkk not in Lot['lot']['usr'].keys():
                Lot['lot']['usr'][kkk] = 0

            Lot['lot']['usr'][kkk] += 1
            Lot['lot']['kol'] += 1
            BD[kkk]['balance'] -= 10000
            save_LOT()
            save()

            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å ü§ë", callback_data="LotBuy"))
            await bot.edit_message_text(f"üéü–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üéü\n"
                                        f"\n"
                                        f"üî±–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚ßΩ 10.000.000 (10–º)\n"
                                        f"üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫–∞ ‚ßΩ 10.000 (10–∫)\n"
                                        f"\n"
                                        f"üë§–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤: {Lot['lot']['kol']}\n"
                                        f"‚ùì–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç–∏–∫ –≤ –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /lot [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]", call.message.chat.id, call.message.message_id, reply_markup=kb)
            await bot.answer_callback_query(callback_query_id=call.id, text=f"–≤—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç–∏–∫, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {Lot['lot']['usr'][kkk]}")
        else:
            await bot.answer_callback_query(callback_query_id=call.id, text=f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! :(", show_alert=True)


@dp.callback_query_handler(lambda call: call.data.startswith('Lec_'))
async def razdacha_fun(call: types.CallbackQuery):
    global People
    user_id, Win, k, kol = call.data.replace('Lec_', '', 1).split(':')
    kkk = str(call.from_user.id)
    mention = "<a href='tg://openmessage?user_id=" + kkk + "'>" + BD[kkk]['name'] + "</>"
    if user_id != kkk:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ï—ë –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –ª–µ—Å–µ–Ω–∫–∞ (—Å—Ç–∞–≤–∫–∞)", show_alert=True)
    else:
        if Win == "1":
            await bot.send_message(call.message.chat.id, f"–£–≤—ã, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç—É –ª–µ—Å—Ç–Ω–∏—Ü—É. –û—Å—Ç—É–ø–∏–ª–∏—Å—å –∏ —É–ø–∞–ª–∏.")
            BD[user_id]['balance'] -= int(kol)
            BD[user_id]['lose'] += int(kol)
            save()
        elif Win == "0":
            if k == "0":
                kafec = 1
            elif k == "1":
                kafec = 1.25
            elif k == "1.25":
                kafec = 1.75
            elif k == "1.75":
                kafec = 2
            elif k == "2.2":
                kafec = 100
                await bot.send_message(call.message.chat.id, f"{mention}, –í—ã –∑–∞–±—Ä–∞–ª–∏—Å—å –Ω–∞ –≤–µ—Ä—à–∏–Ω—É! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2.2x")
                b = int(int(kol) + int((int(kol)/100) * 2.2))
                BD[user_id]['balance'] += b
                BD[user_id]['win'] += b
                save()
            else:
                kafec = 2.2

            if kafec != 100:
                bt = InlineKeyboardMarkup()
                tr = True
                kol = money(kol, user_id)
                kol = int(kol['txt'])
                for i in range(4):
                    i += 1
                    if tr:
                        if random.randint(1, 100) > 50:
                            bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:0:{kafec}:{kol}"))
                        else:
                            bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:1:{kafec}:{kol}"))
                            tr = False
                    else:
                        bt.add(InlineKeyboardButton(f"{i}", callback_data=f"Lec_{user_id}:0:{kafec}:{kol}"))

                bt.add(InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data=f"LecS_{user_id}:1:{kafec}:{kol}"))

                await bot.send_message(call.message.chat.id, f"–í—ã –≤–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—É!\n –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:{kafec} \n\n–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—É—é –ª–µc–µ–Ω–∫—É", reply_markup=bt)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

@dp.callback_query_handler(lambda call: call.data.startswith('LecS_'))
async def razdacha_fun(call: types.CallbackQuery):
    global People
    user_id, Win, k, kol = call.data.replace('LecS_', '', 1).split(':')
    kkk = str(call.from_user.id)
    if user_id != kkk:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ï—ë –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –ª–µ—Å–µ–Ω–∫–∞ (—Å—Ç–∞–≤–∫–∞)", show_alert=True)
    else:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        if k == "0":
            await bot.send_message(call.message.chat.id, "–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –ª–µ–∑—Ç—å?")
            BD[user_id]['balance'] -= int(kol)
            BD[user_id]['lose'] += int(kol)
            save()
        if k == "1":
            await bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ª–∏—à–∏–ª–∏—Å—å –∏ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏!")
        else:
            kaf = float(k)
            b = int(int(kol) + int((int(kol)/100) * kaf))
            BD[user_id]['balance'] += b
            BD[user_id]['win'] += b
            save()
            await bot.send_message(call.message.chat.id, f"–í—ã –∑–∞–±—Ä–∞–ª–∏—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! \n+{int(int(kol) + int((int(kol)/100) * kaf))}")

@dp.callback_query_handler(lambda call: call.data.startswith('TIR_'))
async def razdacha_fun(call: types.CallbackQuery):
    global People
    user_id, num = call.data.replace('TIR_', '', 1).split(':')
    kkk = str(call.from_user.id)
    if user_id != kkk:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ï—ë –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π —Ç–∏—Ä", show_alert=True)
    else:
        mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</a>"
        q = random.randint(1, 8)
        if q == 3:
            await bot.send_message(call.message.chat.id, f"{mention}, –≤—ã –ø–æ–ø–∞–ª–∏ —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 250–∫")
            BD[kkk]['balance'] += 250000
        elif q == 4:
            await bot.send_message(call.message.chat.id, f"{mention}, –≠—Ç–æ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 100–∫")
            BD[kkk]['balance'] += 100000
        else:
            await bot.send_message(call.message.chat.id, f"{mention}, –ù–µ –±–ª–∏–∑–∫–æ, –Ω–µ –¥–∞–ª–µ–∫–æ! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 75–∫")
            BD[kkk]['balance'] += 75000
        save()
        await bot.delete_message(call.message.chat.id, call.message.message_id)

@dp.callback_query_handler(lambda call: call.data.startswith("back1"))
async def backer(call: types.CallbackQuery):
    kkk = str(call.from_user.id)
    mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</a>"
    txt_help = f"–î–∏–ª–µ—Ä: {mention}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? \n\n" \
               f"  1.üí∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ \n" \
               f"  2.üé∞ –∏–≥—Ä—ã \n" \
               f"  3.üöÄ –ë–∞–∑–æ–≤—ã–µ\n\n" \
               f"‚ùì–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."

    bt_m = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("üí∞–∑–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="job")
    b2 = InlineKeyboardButton("üé∞–∏–≥—Ä—ã", callback_data="happy")
    b3 = InlineKeyboardButton("üöÄ–ë–∞–∑–æ–≤—ã–µ", callback_data="main")
    b4 = InlineKeyboardButton("‚ö°Ô∏è–ö–æ–º–∞–Ω–¥—ã(/)", callback_data="cmds")
    bt_m.add(b1, b2)
    bt_m.add(b3)
    bt_m.add(b4)
    await bot.edit_message_text(txt_help, call.message.chat.id, call.message.message_id, reply_markup=bt_m)


@dp.callback_query_handler(lambda call: call.data.startswith("job"))
async def job_make(call: types.CallbackQuery):
    txt = f"üöÄ!–ë–æ–Ω—É—Å\n" \
          f"üßë‚Äçüíª–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å\n" \
          f"üí¨–ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å–∫—É\n" \
          f"üî´–¢–∏—Ä\n"

    mark_bt = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="back1")
    mark_bt.add(b1)
    await bot.edit_message_text(txt, call.message.chat.id, call.message.message_id, reply_markup=mark_bt)

@dp.callback_query_handler(lambda call: call.data.startswith("happy"))
async def job_make(call: types.CallbackQuery):
    txt = f"üé∞–†—É–ª–µ—Ç–∫–∞ (10–∫ —á/–∑)\n" \
          f"ü™ú–õ–µ—Å–µ–Ω–∫–∞ (—Å—Ç–∞–≤–∫–∞)\n" \
          f"\n" \
          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
          f"üèÄ–±–∞c (—Å—Ç–∞–≤–∫–∞)\n" \
          f"‚öΩ–≥–æ–ª (—Å—Ç–∞–≤–∫–∞)\n" \
          f"üé∞—Å–ø–∏–Ω (—Å—Ç–∞–≤–∫–∞)\n" \
          f"üéØ–¥—Ä–∞—Ç—Å (—Å—Ç–∞–≤–∫–∞)\n" \
          f"üé≥–±–æ—É–ª (—Å—Ç–∞–≤–∫–∞)\n"

    mark_bt = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="back1")
    mark_bt.add(b1)
    await bot.edit_message_text(txt, call.message.chat.id, call.message.message_id, reply_markup=mark_bt)

@dp.callback_query_handler(lambda call: call.data.startswith("main"))
async def job_make(call: types.CallbackQuery):
    txt = f"üë§ –ø—Ä–æ—Ñ - –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n" \
          f"üíµ –±–∞–ª–∞–Ω—Å (–±)\n" \
          f"üíµ –±–± - —Å–∫—Ä—ã—Ç—ã–π –±–∞–ª–∞–Ω—Å \n" \
          f"üí∏ +(–º–æ–Ω–µ—Ç—ã) - –ø–µ—Ä–µ–¥–∞–π—Ç–µ –º–æ–Ω–µ—Ç–∫–∏ –¥—Ä—É–≥–æ–º—É\n" \
          f"üè† –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ (–∏–º—è)\n" \
          f"üëë –¢–æ–ø ‚Äî –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏!\n" \
          f"\n" \
          f"üî±–î–æ–Ω–∞—Ç - –º–∞–≥–∞–∑–∏–Ω –±—É—Å—Ç–æ–≤üòé"

    mark_bt = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="back1")
    mark_bt.add(b1)
    await bot.edit_message_text(txt, call.message.chat.id, call.message.message_id, reply_markup=mark_bt)

@dp.callback_query_handler(lambda call: call.data.startswith("cmds"))
async def job_make(call: types.CallbackQuery):
    txt = f"–≤—Å–µ –±—ã—Å—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ:\n" \
          f"/start\n" \
          f"/promokod\n" \
          f"/buyvip\n" \
          f"/games\n" \
          f"/help\n" \
          f"/contact\n" \
          f"/Spirit\n"

    mark_bt = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="back1")
    mark_bt.add(b1)
    await bot.edit_message_text(txt, call.message.chat.id, call.message.message_id, reply_markup=mark_bt)

@dp.callback_query_handler(lambda call: call.data.startswith("DONAT_LIST"))
async def job_make(call: types.CallbackQuery):
    kkk = str(call.from_user.id)
    txt_donat = f"<b>üíµ –∫—É—Ä—Å –í –†–£–ë–õ–Ø–•:</b>\n" \
                f"\n" \
                f"104 —Ä—É–± = 150.000üåÄ (300.000.000ü™ô)\n" \
                f"208 —Ä—É–± = 750.000üåÄ (1.500.000.000ü™ô)\n" \
                f"312 —Ä—É–± = 1.500.000üåÄ (3.000.000.000ü™ô)\n" \
                f"416 —Ä—É–± = 2.250.000üåÄ (4.500.000.000ü™ô)\n" \
                f"520 —Ä—É–± = 3.500.000üåÄ (7.000.000.000ü™ô)\n" \
                f"624 —Ä—É–± = 5.000.000üåÄ (10.000.000.000ü™ô)\n" \
                f"\n" \
                f"<b>üíµ –∫—É—Ä—Å –í –¢–ï–ù–ì–ï:</b>\n" \
                f"\n" \
                f"500—Ç–≥ - 150.000üåÄ (300.000.000ü™ô)\n" \
                f"1000—Ç–≥ - 750.000üåÄ (1.500.000.000ü™ô)\n" \
                f"1500—Ç–≥ - 1.500.000üåÄ (3.000.000.000ü™ô)\n" \
                f"2000—Ç–≥ - 2.250.000üåÄ (4.500.000.000ü™ô)\n" \
                f"2500—Ç–≥ - 3.500.000üåÄ (7.000.000.000ü™ô)\n" \
                f"3000—Ç–≥ - 5.000.000üåÄ (10.000.000.000ü™ô)\n" \
                f"\n" \
                f"‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—Ç–µ —É–∫–∞–∑–∞—Ç—å id –≤ –¥–æ–Ω–∞—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–µ\n"\
                f"\n"\
                f"üÜî–í–∞—à id: {kkk}\n" \
                f"üßë‚Äçüíª–°–≤—è–∑—å —Å –Ω–∞–º–∏: @Trykaban || @Ttypok\n"

    await bot.send_message(call.message.chat.id, txt_donat)

@dp.callback_query_handler(lambda call: call.data.startswith('promoNotId_'))
async def robyFun(call: types.CallbackQuery):
    global BD
    kkk2 = str(call.from_user.id)
    kkk = call.data.replace('promoNotId_', '', 1).split(':')[0]
    if kkk2 == kkk:
        if DONAT[kkk]['donat'] < 50000:
            await bot.send_message(call.message.chat.id, f"ID: {kkk},  –£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç –º–æ–Ω–µ—Ç.")
        else:
            if BD[kkk]['balance'] < PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']:
                await bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ù—É–∂–Ω–æ: {PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']}")
            else:
                PF['promo'][PROMO_BITWIN[kkk]['name']] = {"end": PROMO_BITWIN[kkk]['kol'], "win": "balance", "id": "000", "kol": PROMO_BITWIN[kkk]['mon'], "activ": []}
                save_PF()
                await bot.delete_message(PROMO_BITWIN[kkk]['chat'], PROMO_BITWIN[kkk]['msg'])
                await bot.send_message(call.message.chat.id, "–í—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! \n\n"
                                                             f"–ü—Ä–æ–º–æ–∫–æ–¥: {PROMO_BITWIN[kkk]['name']}\n"
                                                             f"–ü—Ä–∏–∑: {PROMO_BITWIN[kkk]['mon']}\n"
                                                             f"–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {PROMO_BITWIN[kkk]['kol']}")
                BD[kkk]['balance'] -= PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']
                DONAT[kkk]['donat'] -= 50000
                save()
                save_DONAT()
                del PROMO_BITWIN[kkk]

@dp.callback_query_handler(lambda call: call.data.startswith('promoId_'))
async def robyFun(call: types.CallbackQuery):
    global BD
    kkk2 = str(call.from_user.id)
    kkk = call.data.replace('promoId_', '', 1).split(':')[0]
    if kkk2 == kkk:
        print("1")
        print(PROMO_BITWIN)
        if DONAT[kkk]['donat'] < 50000:
            await bot.send_message(call.message.chat.id, f"ID: {kkk},  –£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–Ω–∞—Ç –º–æ–Ω–µ—Ç.")
        else:
            if BD[kkk]['balance'] < PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']:
                await bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ù—É–∂–Ω–æ: {PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']}")
            else:
                PF['promo'][PROMO_BITWIN[kkk]['name']] = {"end": PROMO_BITWIN[kkk]['kol'], "owner":f"{kkk}", "link":f"{PROMO_BITWIN[kkk]['link']}", "win": "balance", "id": PROMO_BITWIN[kkk]['idd'], "kol": PROMO_BITWIN[kkk]['mon'], "activ": []}
                save_PF()
                await bot.delete_message(PROMO_BITWIN[kkk]['chat'], PROMO_BITWIN[kkk]['msg'])
                await bot.send_message(call.message.chat.id, "–í—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                                                             f"–ü—Ä–æ–º–æ–∫–æ–¥: {PROMO_BITWIN[kkk]['name']}\n"
                                                             f"–ü—Ä–∏–∑: {PROMO_BITWIN[kkk]['mon']}\n"
                                                             f"–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {PROMO_BITWIN[kkk]['kol']}\n"
                                                             f"—Å—Å—ã–ª–∫–∞: {PROMO_BITWIN[kkk]['link']}")
                BD[kkk]['balance'] -= PROMO_BITWIN[kkk]['kol'] * PROMO_BITWIN[kkk]['mon']
                DONAT[kkk]['donat'] -= 50000
                save()
                save_DONAT()
                del PROMO_BITWIN[kkk]

@dp.callback_query_handler(lambda call: call.data.startswith('buygold'))
async def buygold(call: types.CallbackQuery):
    global BD
    kkk = str(call.from_user.id)
    mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</a>"
    if kkk not in DONAT.keys() or DONAT[kkk]['donat'] < 100000:
        await bot.send_message(call.message.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –°–ø–∏—Ä–∏—Ç –∫–æ–∏–Ω–æ–≤. \n\n–ò—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏: /donat")
    else:
        if "vip" not in DONAT[kkk].keys():
            vips = True
        else:
            if DONAT[kkk]['vip']['act'] == True:
                vips = False
            else:
                vips = True

        if vips:
            DONAT[kkk]['donat'] -= 100000
            clock = datetime.now() + timedelta(days=14)
            DONAT[kkk]['vip'] = {"act": True, "date": str(clock).split(".")[0], "vp":1, "bns":f"0"}
            save_DONAT()
            await bot.send_message(call.message.chat.id, f"{mention}, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ GOLD VIP –∑–∞ 100.000 Spirit coins. –ù–∞ 2 –Ω–µ–¥–µ–ª–∏(–¥–æ {DONAT[kkk]['vip']['date']})\n\nüïî–í—Ä–µ–º—è –≤ –±–æ—Ç–µ: {str(datetime.now()).split('.')[0]}")
        else:
            await bot.send_message(call.message.chat.id, f"{mention}, –£ –≤–∞—Å –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∏–ø —Å—Ç–∞—Ç—É—Å. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

@dp.callback_query_handler(lambda call: call.data.startswith('buydimond'))
async def buydmd(call: types.CallbackQuery):
    global BD
    kkk = str(call.from_user.id)
    mention = "<a href='tg://user?id=" + kkk + "'>" + BD[kkk]['name'] + "</a>"
    if kkk not in DONAT.keys() or DONAT[kkk]['donat'] < 300000:
        await bot.send_message(call.message.chat.id, f"{mention}, –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –°–ø–∏—Ä–∏—Ç –∫–æ–∏–Ω–æ–≤. \n\n–ò—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏: /donat")
    else:
        if "vip" not in DONAT[kkk].keys():
            vips = True
        else:
            if DONAT[kkk]['vip']['act'] == True:
                vips = False
            else:
                vips = True

        if vips:
            DONAT[kkk]['donat'] -= 300000
            clock = datetime.now() + timedelta(days=14)
            DONAT[kkk]['vip'] = {"act": True, "date": str(clock).split(".")[0], "vp":2, "bns":f"0"}
            save_DONAT()
            await bot.send_message(call.message.chat.id, f"{mention}, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ DIMOND VIP –∑–∞ 300.000 Spirit coins. –ù–∞ 2 –Ω–µ–¥–µ–ª–∏(–¥–æ {DONAT[kkk]['vip']['date']})\n\nüïî–í—Ä–µ–º—è –≤ –±–æ—Ç–µ: {str(datetime.now()).split('.')[0]}")
        else:
            await bot.send_message(call.message.chat.id, f"{mention}, –£ –≤–∞—Å –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∏–ø —Å—Ç–∞—Ç—É—Å. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

@dp.callback_query_handler(lambda call: call.data.startswith('takeBonus'))
async def buydmd(call: types.CallbackQuery):
    global BD
    kkk = str(call.from_user.id)
    mention = "<a href='tg://user?id=" + kkk + "'>" + kkk + "</a>"
    txt_bonus_chat = f"üí∏–ö–∞–∂–¥—ã–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞.\n" \
                     f"\n" \
                     f"üí™–£—Å–ø–µ–π –∑–∞–±—Ä–∞—Ç—å –ø–æ –Ω–µ–π 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤!\n" \
                     f"\n" \
                     f"üòé–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: –ó–∞–±—Ä–∞–ª–∏. (ID: {mention})"

    await bot.edit_message_text(txt_bonus_chat, call.message.chat.id, call.message.message_id)
    BD[kkk]['balance'] += 10000000
    save()

#######             BLACK JACK

@dp.callback_query_handler(lambda call: call.data.startswith('BJDBL_'))
async def robyFun(call: types.CallbackQuery):
    global BD
    kkk2 = str(call.from_user.id)
    kkk = call.data.replace('BJDBL_', '', 1).split(':')[0]
    mention = "<a href='tg://user?id=" + kkk + "'>" + kkk + "</a>"
    if kkk != kkk2:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ù–∞—á–Ω–∏—Ç–µ –µ—ë –ø–æ –∫–æ–º–∞–Ω–¥–µ: blackjack [—Å—Ç–∞–≤–∫–∞]  –∏–ª–∏  /blackjack [—Å—Ç–∞–≤–∫–∞]", show_alert=True)
    else:
        if BD[kkk]['balance'] < BlackJack[kkk]['stavka']:
            await bot.send_message(call.message.chat.id, f"{mention} –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        else:
            BD[kkk]['balance'] -= BlackJack[kkk]['stavka']
            t = random.randint(2, 11)
            if t in [10, 9, 11]:
                t = random.randint(2, 11)

            BlackJack[kkk]['user'] += t
            BlackJack[kkk]['stavka'] += BlackJack[kkk]['stavka']
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("ü§ë–£–¥–≤–æ–∏—Ç—å", callback_data=f"BJDBL_{kkk}"))
            kb.add(InlineKeyboardButton("üòé–í–∑—è—Ç—å", callback_data=f"BJTK_{kkk}"))
            kb.add(InlineKeyboardButton("üëå–•–≤–∞—Ç–∏—Ç", callback_data=f"BJSTP_{kkk}"))
            await bot.send_message(call.message.chat.id, f"{mention}, –í—ã —É–¥–≤–æ–∏–ª–∏ —Å—Ç–∞–≤–∫—É. –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –æ—á–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç: {BlackJack[kkk]['user']}\n–°—Ç–∞–≤–∫–∞: {BlackJack[kkk]['stavka']}\n\n–í–∞—à —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥?", reply_markup=kb)

@dp.callback_query_handler(lambda call: call.data.startswith('BJTK_'))
async def robyFun(call: types.CallbackQuery):
    global BD
    kkk2 = str(call.from_user.id)
    kkk = call.data.replace('BJTK_', '', 1).split(':')[0]
    mention = "<a href='tg://user?id=" + kkk + "'>" + kkk + "</a>"
    if kkk != kkk2:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ù–∞—á–Ω–∏—Ç–µ –µ—ë –ø–æ –∫–æ–º–∞–Ω–¥–µ: blackjack [—Å—Ç–∞–≤–∫–∞]  –∏–ª–∏  /blackjack [—Å—Ç–∞–≤–∫–∞]", show_alert=True)
    else:
        t = random.randint(2, 11)
        if t in [10, 9, 11]:
            t = random.randint(2, 11)

        BlackJack[kkk]['user'] += t
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("ü§ë–£–¥–≤–æ–∏—Ç—å", callback_data=f"BJDBL_{kkk}"))
        kb.add(InlineKeyboardButton("üòé–í–∑—è—Ç—å", callback_data=f"BJTK_{kkk}"))
        kb.add(InlineKeyboardButton("üëå–•–≤–∞—Ç–∏—Ç", callback_data=f"BJSTP_{kkk}"))
        await bot.send_message(call.message.chat.id, f"{mention}, –î–∏–ª–ª–µ—Ä –≤—ã–¥–∞–ª –≤–∞–º –∫–∞—Ä—Ç—É. –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –æ—á–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç: {BlackJack[kkk]['user']}\n–°—Ç–∞–≤–∫–∞: {BlackJack[kkk]['stavka']}\n\n–í–∞—à —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥?", reply_markup=kb)

@dp.callback_query_handler(lambda call: call.data.startswith('BJSTP_'))
async def robyFun(call: types.CallbackQuery):
    global BD
    kkk2 = str(call.from_user.id)
    kkk = call.data.replace('BJSTP_', '', 1).split(':')[0]
    mention = "<a href='tg://user?id=" + kkk + "'>" + kkk + "</a>"
    if kkk != kkk2:
        await bot.answer_callback_query(callback_query_id=call.id, text=f"–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞! –ù–∞—á–Ω–∏—Ç–µ –µ—ë –ø–æ –∫–æ–º–∞–Ω–¥–µ: blackjack [—Å—Ç–∞–≤–∫–∞]  –∏–ª–∏  /blackjack [—Å—Ç–∞–≤–∫–∞]", show_alert=True)
    else:
        if BlackJack[kkk]['user'] == 21:
            b = random.randint(1, 12)
            if b == 1:
                await bot.send_message(call.message.chat.id, f"{mention}, –ù–ò–ß–¨–Ø\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: 21")
                BD[kkk]['balance'] += BlackJack[kkk]['stavka']
            else:
                if b > 3:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–æ–±–µ–¥–∞\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(22, 25)}")
                    BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
                else:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–æ–±–µ–¥–∞\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(18, 20)}")
                    BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
        else:
            if BlackJack[kkk]['user'] > 21:
                b = random.randint(1, 5)
                if b == 1:
                    if BlackJack[kkk]['user'] > 26:
                        await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(18, 25)}")
                    else:
                        await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–ë–ï–î–ê.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(BlackJack[kkk]['user'], BlackJack[kkk]['user']+3)}")
                        BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
                else:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(18, 21)}")
            elif BlackJack[kkk]['user'] == 20:
                b = random.randint(1, 5)
                if b == 1:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: 21")
                else:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–ë–ï–î–ê.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(22, 25)}")
                    BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
            elif BlackJack[kkk]['user'] <= 19 and BlackJack[kkk]['user'] > 15:
                b = random.randint(1, 4)
                if b == 1:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: 21")
                else:
                    if b == 2 or b == 3:
                        await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–ë–ï–î–ê.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(22, 24)}")
                        BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
                    else:
                        await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n{random.randint(20, 21)}")
            elif BlackJack[kkk]['user'] <= 15:
                b = random.randint(1, 10)
                if b == 1:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–ë–ï–î–ê.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(21, 27)}")
                    BD[kkk]['balance'] += (BlackJack[kkk]['stavka'] * 2)
                else:
                    await bot.send_message(call.message.chat.id, f"{mention}, –ü–û–†–ê–ñ–ï–ù–ò–ï.\n\n–í–∞—à–∏ –æ—á–∫–∏: {BlackJack[kkk]['user']}\n–û—á–∫–∏ –¥–∏–ª–ª–µ—Ä–∞: {random.randint(16, 21)}")

        await bot.delete_message(call.message.chat.id, call.message.message_id)
        save()


if __name__ == "__main__":
    load()
    print(f"[{str(datetime.now()).split('.')[0]}]–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! \n–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã—Ö: {len(BD)}")
    executor.start_polling(dp)
